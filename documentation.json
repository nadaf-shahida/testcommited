{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-08be5fbf4b38b88aba9e42e61074ad7f",
            "file": "src/app/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  ActionReducer,\r\n  ActionReducerMap,\r\n  createFeatureSelector,\r\n  createSelector,\r\n  MetaReducer,\r\n} from '@ngrx/store';\r\nimport { environment } from '../../environments/environment';\r\nimport * as fromCustomerSupport from './reducers/customer-support.reducer';\r\nimport * as fromAuth from './reducers/auth.reducer';\r\nimport * as fromRouter from '@ngrx/router-store';\r\nimport * as fromProduct from '../modules/products/state/product.reducer';\r\n\r\nexport interface AppState {\r\n  [fromCustomerSupport.customerSupportFeatureKey]: fromCustomerSupport.State;\r\n\r\n  [fromAuth.authFeatureKey]: fromAuth.State;\r\n\r\n  router: fromRouter.RouterReducerState;\r\n\r\n  [fromProduct.productsFeatureKey]: fromProduct.State;\r\n\r\n}\r\n\r\nexport const reducers: ActionReducerMap<AppState> = {\r\n  [fromCustomerSupport.customerSupportFeatureKey]: fromCustomerSupport.reducer,\r\n\r\n  [fromAuth.authFeatureKey]: fromAuth.reducer,\r\n\r\n  router: fromRouter.routerReducer,\r\n\r\n  [fromProduct.productsFeatureKey]: fromProduct.reducer,\r\n};\r\n\r\nexport const metaReducers: MetaReducer<AppState>[] = !environment.production\r\n  ? [debug]\r\n  : [];\r\n\r\nexport function debug(reducer: ActionReducer<any>): ActionReducer<any> {\r\n  return function (state, action){\r\n    console.log('state', state);\r\n    console.log('action', action);\r\n\r\n    return reducer(state, action);\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromRouter.RouterReducerState",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromCustomerSupport.State",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromAuth.State",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "fromProduct.State",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "AuthLinksViewModal",
            "id": "interface-AuthLinksViewModal-2814fc9fba6e7caa23fcf43cbadfe8db",
            "file": "src/app/store/selectors/auth.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport * as fromAuth from '../reducers/auth.reducer';\r\n\r\nexport const selectAuthState = createFeatureSelector<fromAuth.State>(\r\n  fromAuth.authFeatureKey\r\n);\r\n\r\nexport interface AuthLinksViewModal {\r\n  isAdmin: boolean;\r\n  isLoggedin: boolean;\r\n}\r\n\r\nexport const selectIsLoggedIn = createSelector(\r\n  selectAuthState,\r\n  (state: fromAuth.State): boolean => state.user.id != null\r\n);\r\n\r\nexport const selectIsAdmin = createSelector(\r\n  selectAuthState,\r\n  (state: fromAuth.State): boolean => state.user.isadmin\r\n);\r\n\r\nexport const selectAuthLinksViewModel = createSelector(\r\n  selectIsAdmin,\r\n  selectIsLoggedIn,\r\n  (isAdmin: boolean, isLoggedIn: boolean): AuthLinksViewModal => {\r\n    return {\r\n      isAdmin: isAdmin,\r\n      isLoggedin: isLoggedIn,\r\n    };\r\n  }\r\n);\r\n",
            "properties": [
                {
                    "name": "isAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isLoggedin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Cart",
            "id": "interface-Cart-5c443773bfc002547b8ffeb33ddf714a",
            "file": "src/app/modules/cart/resources/cart.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Cart {\r\n  id: string;\r\n  userid: string;\r\n  products: Product[];\r\n  isCartEmpty: boolean;\r\n  cartItemsLength: number;\r\n  productsSubtotal: number;\r\n}\r\nexport interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  imageUrl: string;\r\n  quantity: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "cartItemsLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isCartEmpty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "productsSubtotal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "userid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Category",
            "id": "interface-Category-76ee8a3ae8d5701bb2f69e63207c1168",
            "file": "src/app/modules/category/resources/model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Category {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CustomerMessage",
            "id": "interface-CustomerMessage-03442be83e5b6d2a407942ec6fa39255",
            "file": "src/app/shared/models/customer-message.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CustomerMessage {\r\n  name: string;\r\n  email: string;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CustomerSupportViewModel",
            "id": "interface-CustomerSupportViewModel-d19e0a64d1821be72c98fae18cc214cd",
            "file": "src/app/store/selectors/customer-support.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport {\r\n  State,\r\n  customerSupportFeatureKey,\r\n} from '../reducers/customer-support.reducer';\r\n\r\n// Get feature from store\r\nexport const selectCustomerSupportFeature = createFeatureSelector<State>(\r\n  customerSupportFeatureKey\r\n);\r\n\r\n// Return name from feature\r\nexport const selectName = createSelector(\r\n  selectCustomerSupportFeature,\r\n  (state: State) => state.name\r\n);\r\n\r\nexport interface CustomerSupportViewModel {\r\n  name: string;\r\n  isSentSuccess: boolean;\r\n}\r\n\r\nexport const selectCustomerSupportModel = createSelector(\r\n  selectCustomerSupportFeature,\r\n  (state: State): CustomerSupportViewModel => {\r\n    return {\r\n      name: state.name,\r\n      isSentSuccess: state.isSentSuccess,\r\n    };\r\n  }\r\n);\r\n",
            "properties": [
                {
                    "name": "isSentSuccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "HeaderViewModel",
            "id": "interface-HeaderViewModel-ad4c788f30af6f0290b48e67d706c734",
            "file": "src/app/store/selectors/header.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createSelector } from '@ngrx/store';\r\nimport { selectIsAdmin, selectIsLoggedIn } from './auth.selectors';\r\n\r\n/********************************************************************************* */\r\n/****RETURN Header View Model */\r\n/********************************************************************************* */\r\n\r\nexport interface HeaderViewModel {\r\n  isAdmin: boolean;\r\n  isLoggedin: boolean;\r\n}\r\n\r\nexport const selectHeaderViewModel = createSelector(\r\n  selectIsAdmin,\r\n  selectIsLoggedIn,\r\n  (isAdmin: boolean, isLoggedIn: boolean): HeaderViewModel => {\r\n    return {\r\n      isAdmin: isAdmin,\r\n      isLoggedin: isLoggedIn,\r\n    };\r\n  }\r\n);\r\n",
            "properties": [
                {
                    "name": "isAdmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "isLoggedin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PaginatedResult",
            "id": "interface-PaginatedResult-c681ee88e782f4fc0da0809343c05f5b",
            "file": "src/app/shared/models/pagination.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\r\n  first: string;\r\n  next: string;\r\n  last: string;\r\n  prev: string;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n",
            "properties": [
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PaginatedResult",
            "id": "interface-PaginatedResult-595e16f623c47b8a469902f25db228c7-1",
            "file": "src/app/modules/products/resources/product.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  imageUrl: string;\r\n  quantity: number;\r\n}\r\nexport interface PriceFilter {\r\n  name: string;\r\n  value: string;\r\n  min: string;\r\n  max: string;\r\n}\r\n\r\nexport interface Pagination {\r\n  first: string;\r\n  next: string;\r\n  last: string;\r\n  prev: string;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n\r\nexport interface PaginationParams {\r\n  pricemin: string;\r\n  pricemax: string;\r\n  page: string;\r\n  limit: string;\r\n  url: string;\r\n}\r\n\r\nexport var paginationParamsModel: PaginationParams = {\r\n  pricemin: '0',\r\n  pricemax: '999',\r\n  page: '1',\r\n  limit: '9',\r\n  url: null,\r\n};\r\n",
            "properties": [
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "result",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PaginatedResult-1"
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-c681ee88e782f4fc0da0809343c05f5b",
            "file": "src/app/shared/models/pagination.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Pagination {\r\n  first: string;\r\n  next: string;\r\n  last: string;\r\n  prev: string;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n",
            "properties": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "next",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "prev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Pagination",
            "id": "interface-Pagination-595e16f623c47b8a469902f25db228c7-1",
            "file": "src/app/modules/products/resources/product.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  imageUrl: string;\r\n  quantity: number;\r\n}\r\nexport interface PriceFilter {\r\n  name: string;\r\n  value: string;\r\n  min: string;\r\n  max: string;\r\n}\r\n\r\nexport interface Pagination {\r\n  first: string;\r\n  next: string;\r\n  last: string;\r\n  prev: string;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n\r\nexport interface PaginationParams {\r\n  pricemin: string;\r\n  pricemax: string;\r\n  page: string;\r\n  limit: string;\r\n  url: string;\r\n}\r\n\r\nexport var paginationParamsModel: PaginationParams = {\r\n  pricemin: '0',\r\n  pricemax: '999',\r\n  page: '1',\r\n  limit: '9',\r\n  url: null,\r\n};\r\n",
            "properties": [
                {
                    "name": "first",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "last",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "next",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "prev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Pagination-1"
        },
        {
            "name": "PaginationParams",
            "id": "interface-PaginationParams-595e16f623c47b8a469902f25db228c7",
            "file": "src/app/modules/products/resources/product.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  imageUrl: string;\r\n  quantity: number;\r\n}\r\nexport interface PriceFilter {\r\n  name: string;\r\n  value: string;\r\n  min: string;\r\n  max: string;\r\n}\r\n\r\nexport interface Pagination {\r\n  first: string;\r\n  next: string;\r\n  last: string;\r\n  prev: string;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n\r\nexport interface PaginationParams {\r\n  pricemin: string;\r\n  pricemax: string;\r\n  page: string;\r\n  limit: string;\r\n  url: string;\r\n}\r\n\r\nexport var paginationParamsModel: PaginationParams = {\r\n  pricemin: '0',\r\n  pricemax: '999',\r\n  page: '1',\r\n  limit: '9',\r\n  url: null,\r\n};\r\n",
            "properties": [
                {
                    "name": "limit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pricemax",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "pricemin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "PriceFilter",
            "id": "interface-PriceFilter-595e16f623c47b8a469902f25db228c7",
            "file": "src/app/modules/products/resources/product.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  imageUrl: string;\r\n  quantity: number;\r\n}\r\nexport interface PriceFilter {\r\n  name: string;\r\n  value: string;\r\n  min: string;\r\n  max: string;\r\n}\r\n\r\nexport interface Pagination {\r\n  first: string;\r\n  next: string;\r\n  last: string;\r\n  prev: string;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n\r\nexport interface PaginationParams {\r\n  pricemin: string;\r\n  pricemax: string;\r\n  page: string;\r\n  limit: string;\r\n  url: string;\r\n}\r\n\r\nexport var paginationParamsModel: PaginationParams = {\r\n  pricemin: '0',\r\n  pricemax: '999',\r\n  page: '1',\r\n  limit: '9',\r\n  url: null,\r\n};\r\n",
            "properties": [
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-5c443773bfc002547b8ffeb33ddf714a",
            "file": "src/app/modules/cart/resources/cart.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Cart {\r\n  id: string;\r\n  userid: string;\r\n  products: Product[];\r\n  isCartEmpty: boolean;\r\n  cartItemsLength: number;\r\n  productsSubtotal: number;\r\n}\r\nexport interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  imageUrl: string;\r\n  quantity: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Product",
            "id": "interface-Product-595e16f623c47b8a469902f25db228c7-1",
            "file": "src/app/modules/products/resources/product.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Product {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price: string;\r\n  imageUrl: string;\r\n  quantity: number;\r\n}\r\nexport interface PriceFilter {\r\n  name: string;\r\n  value: string;\r\n  min: string;\r\n  max: string;\r\n}\r\n\r\nexport interface Pagination {\r\n  first: string;\r\n  next: string;\r\n  last: string;\r\n  prev: string;\r\n}\r\n\r\nexport interface PaginatedResult<T> {\r\n  result: T;\r\n  pagination: Pagination;\r\n}\r\n\r\nexport interface PaginationParams {\r\n  pricemin: string;\r\n  pricemax: string;\r\n  page: string;\r\n  limit: string;\r\n  url: string;\r\n}\r\n\r\nexport var paginationParamsModel: PaginationParams = {\r\n  pricemin: '0',\r\n  pricemax: '999',\r\n  page: '1',\r\n  limit: '9',\r\n  url: null,\r\n};\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Product-1"
        },
        {
            "name": "ProductsViewModel",
            "id": "interface-ProductsViewModel-140bb36f578a6d6e5eb23dcf0f9c7ae4",
            "file": "src/app/modules/products/state/product.selectors.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector, createSelector } from '@ngrx/store';\r\n\r\nimport * as ProductReducer from './product.reducer';\r\nimport * as ProductModel from '../resources/product';\r\n\r\nexport const selectProductsState = createFeatureSelector<ProductReducer.State>(\r\n  ProductReducer.productsFeatureKey\r\n);\r\n\r\nexport const selectAllProducts = createSelector(\r\n  selectProductsState,\r\n  ProductReducer.selectAll\r\n);\r\n\r\nexport const selectAllEntities = createSelector(\r\n  selectProductsState,\r\n  ProductReducer.selectEntities\r\n);\r\n\r\nexport const selectPagination = createSelector(\r\n  selectProductsState,\r\n  (state: ProductReducer.State) => state.pagination\r\n);\r\n\r\n/********************************************************************************* */\r\n/****RETURN PRODUCTS VIEW MODEL */\r\n/********************************************************************************* */\r\n\r\nexport interface ProductsViewModel {\r\n  pagination: ProductModel.Pagination;\r\n  products: ProductModel.Product[];\r\n}\r\n\r\nexport const selectProductsViewModel = createSelector(\r\n  selectPagination,\r\n  selectAllProducts,\r\n  (\r\n    pagination: ProductModel.Pagination,\r\n    products: ProductModel.Product[]\r\n  ): ProductsViewModel => {\r\n    return {\r\n      pagination: pagination,\r\n      products: products,\r\n    };\r\n  }\r\n);\r\n\r\nexport const entityExists = createSelector(\r\n  selectAllEntities,\r\n  (entities, props): boolean => {\r\n    return entities[props.id] == undefined ? false : true;\r\n  }\r\n);\r\n\r\nexport const selectEntityById = createSelector(\r\n  selectAllEntities,\r\n  (entities, props) => entities[props.id]\r\n);\r\n",
            "properties": [
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductModel.Pagination",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "products",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProductModel.Product[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-d10c25bd9c9b611b648618f53c32a9f5",
            "file": "src/app/store/reducers/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as AuthActions from '../actions/auth.actions';\r\nimport { User } from '../../modules/auth/resources/auth';\r\n\r\nexport const authFeatureKey = 'auth';\r\n\r\nexport interface State {\r\n  user: User;\r\n  error: any;\r\n}\r\n\r\nexport const initialState: State = {\r\n  user: {\r\n    id: null,\r\n    username: null,\r\n    email: null,\r\n    isadmin: null,\r\n  },\r\n  error: null,\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n\r\n  on(AuthActions.loginSuccess, AuthActions.browserReload, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: action.user,\r\n      error: null,\r\n    };\r\n  }),\r\n  on(AuthActions.loginFailure, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: {\r\n        id: null,\r\n        username: null,\r\n        email: null,\r\n        isadmin: null,\r\n      },\r\n      error: action.error,\r\n    };\r\n  }),\r\n  on(AuthActions.logout, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: {\r\n        id: null,\r\n        username: null,\r\n        email: null,\r\n        isadmin: null,\r\n      },\r\n      error: null,\r\n    };\r\n  })\r\n);\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-83f0c1da6f8a46bc8872d9f047d3a577-1",
            "file": "src/app/store/reducers/customer-support.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport * as fromSupportActions from '../actions/customer-support.actions';\r\n\r\nexport const customerSupportFeatureKey = 'customerSupport';\r\n\r\nexport interface State {\r\n  name: string;\r\n  isSentSuccess: boolean | null;\r\n}\r\n\r\nexport const initialState: State = {\r\n  name: null,\r\n  isSentSuccess: null,\r\n};\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n  on(fromSupportActions.sendingCustomerSupportMessage, (state, action) => {\r\n    return {\r\n      ...state,\r\n      name: action.data.name,\r\n    };\r\n  }),\r\n  on(fromSupportActions.sendMessageStatus, (state, action) => {\r\n    return {\r\n      ...state,\r\n      isSentSuccess: action.isSentSuccess,\r\n    };\r\n  }),\r\n  on(fromSupportActions.clearForm, (state) => {\r\n    return {\r\n      ...state,\r\n      name: null,\r\n      isSentSuccess: null,\r\n    };\r\n  })\r\n);\r\n",
            "properties": [
                {
                    "name": "isSentSuccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-4a7153710ee280d10b7207ac0a26f3a8-2",
            "file": "src/app/modules/products/state/product.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\r\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\r\n\r\nimport * as ProductActions from './product.actions';\r\nimport { Product, Pagination } from '../resources/product';\r\n\r\nexport const productsFeatureKey = 'products';\r\n\r\nexport interface State extends EntityState<Product> {\r\n  // additional entities state properties\r\n  pagination: Pagination;\r\n  error: any;\r\n}\r\n\r\nexport const adapter: EntityAdapter<Product> = createEntityAdapter<Product>({\r\n  sortComparer: sortByName,\r\n  // selectId: selectProductId\r\n});\r\n\r\nexport const initialState: State = adapter.getInitialState({\r\n  // additional entity state properties\r\n  pagination: null,\r\n  error: null,\r\n});\r\n\r\nexport const reducer = createReducer(\r\n  initialState,\r\n  on(ProductActions.loadProductsSuccess, (state, action) =>\r\n    adapter.setAll(action.paginatedResult.result, {\r\n      ...state,\r\n      pagination: action.paginatedResult.pagination,\r\n    })\r\n  ),\r\n  on(\r\n    ProductActions.loadProductSuccess,\r\n    ProductActions.addProductSuccess,\r\n    (state, action) => adapter.addOne(action.product, state)\r\n  ),\r\n  on(ProductActions.upsertProductSuccess, (state, action) =>\r\n    adapter.upsertOne(action.product, state)\r\n  ),\r\n  on(\r\n    ProductActions.deleteProduct,\r\n    ProductActions.deleteItemProduct,\r\n    (state, action) => adapter.removeOne(action.productId, state)\r\n  ),\r\n  on(ProductActions.clearProducts, (state) => adapter.removeAll(state)),\r\n  on(\r\n    ProductActions.upsertProductFailure,\r\n    ProductActions.loadProductsFailure,\r\n    ProductActions.addProductFailure,\r\n    ProductActions.loadProductFailure,\r\n    ProductActions.deleteProductFailure,\r\n    (state, action) => {\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    }\r\n  )\r\n);\r\n\r\nexport const {\r\n  selectIds,\r\n  selectEntities,\r\n  selectAll,\r\n  selectTotal,\r\n} = adapter.getSelectors();\r\n\r\nexport function sortByName(a: Product, b: Product): number {\r\n  return a.name.localeCompare(b.name);\r\n}\r\n\r\n// export function selectProductId(a: Product): string {\r\n//   //In this case this would be optional since primary key is id\r\n//   return a.productid;\r\n// }\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "extends": "EntityState",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "User",
            "id": "interface-User-3a4f93ba572cabe8a34f25e4404f5dce",
            "file": "src/app/modules/auth/resources/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  isadmin: boolean;\r\n}\r\n\r\nexport var UserModel: User = {\r\n  id: null,\r\n  username: null,\r\n  email: null,\r\n  isadmin: false,\r\n};\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isadmin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AlertEffects",
            "id": "injectable-AlertEffects-63cbb36dd787eddaf36e92716775af58",
            "file": "src/app/store/effects/alert.effects.ts",
            "properties": [
                {
                    "name": "checkingYourInformation$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginPage, fromAuthActions.loginModal),\r\n        tap(() => this.alertService.info('Checking your information'))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "comeBackSoon$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.info('Come Back Soon!');\r\n          }, 2000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "productCreated$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.addProductSuccess),\r\n        tap((action) => this.alertService.success('Product Created'))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "productDeleted$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.deleteProductSuccess),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.info('Product removed from Database');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "productUpsertSuccess$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.upsertProductSuccess),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.info('Product Updated');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "removeProductFromStore$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromProductActions.deleteProduct,\r\n          fromProductActions.deleteItemProduct\r\n        ),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.warning('Remove Product From Store');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "unableToCreateProduct$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.addProductFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to create product');\r\n          }, 2000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "unableToDeleteProduct$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.deleteProductFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to delete product');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 149
                },
                {
                    "name": "unableToEditProduct$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.upsertProductFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to edit product');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "unableToLoadProducts$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.loadProductsFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to load products');\r\n          }, 2000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "unableToLogin$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginFailure),\r\n        tap(() => this.alertService.danger('Unable to login'))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "welcomeBack$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap((action) =>\r\n          this.alertService.success(\r\n            'Welcome Back ' + action.user.username + ' !'\r\n          )\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "youAreLoggedOut$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() => this.alertService.warning('You are logged out'))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { AlertService } from 'ngx-alerts';\r\nimport * as fromAuthActions from '../actions/auth.actions';\r\nimport { tap } from 'rxjs/operators';\r\nimport * as fromProductActions from '../../modules/products/state/product.actions';\r\n\r\n@Injectable()\r\nexport class AlertEffects {\r\n  checkingYourInformation$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginPage, fromAuthActions.loginModal),\r\n        tap(() => this.alertService.info('Checking your information'))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  welcomeBack$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap((action) =>\r\n          this.alertService.success(\r\n            'Welcome Back ' + action.user.username + ' !'\r\n          )\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  unableToLogin$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginFailure),\r\n        tap(() => this.alertService.danger('Unable to login'))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  youAreLoggedOut$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() => this.alertService.warning('You are logged out'))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  comeBackSoon$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.info('Come Back Soon!');\r\n          }, 2000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  unableToLoadProducts$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.loadProductsFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to load products');\r\n          }, 2000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  productCreated$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.addProductSuccess),\r\n        tap((action) => this.alertService.success('Product Created'))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  unableToCreateProduct$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.addProductFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to create product');\r\n          }, 2000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  productUpsertSuccess$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.upsertProductSuccess),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.info('Product Updated');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  unableToEditProduct$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.upsertProductFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to edit product');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  removeProductFromStore$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromProductActions.deleteProduct,\r\n          fromProductActions.deleteItemProduct\r\n        ),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.warning('Remove Product From Store');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  productDeleted$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.deleteProductSuccess),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.info('Product removed from Database');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n  unableToDeleteProduct$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromProductActions.deleteProductFailure),\r\n        tap(() =>\r\n          setTimeout(() => {\r\n            this.alertService.danger('Unable to delete product');\r\n          }, 1000)\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  constructor(private actions$: Actions, private alertService: AlertService) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 160,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AppEffects",
            "id": "injectable-AppEffects-028024006f9e89ba299d822c08f21fc1",
            "file": "src/app/store/effects/app.effects.ts",
            "properties": [
                {
                    "name": "addUserToLocalStorage$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap((action) =>\r\n          localStorage.setItem('user', JSON.stringify(action.user))\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "removeUserFromLocalStorage$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() => localStorage.removeItem('user'))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport * as fromAuthActions from '../actions/auth.actions';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class AppEffects {\r\n  removeUserFromLocalStorage$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() => localStorage.removeItem('user'))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  addUserToLocalStorage$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap((action) =>\r\n          localStorage.setItem('user', JSON.stringify(action.user))\r\n        )\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  constructor(private actions$: Actions) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-e50773b5e3a007458b61e8f22b700a05",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(AuthActions.loginPage, AuthActions.loginModal),\r\n      concatMap((action) =>\r\n        this.authService.login(action.username, action.password).pipe(\r\n          map((user) => AuthActions.loginSuccess({ user: user })),\r\n          catchError((error) => of(AuthActions.loginFailure({ error })))\r\n        )\r\n      )\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { catchError, map, concatMap } from 'rxjs/operators';\r\nimport { EMPTY, of } from 'rxjs';\r\n\r\nimport * as AuthActions from '../actions/auth.actions';\r\nimport { AuthService } from '../../modules/auth/resources/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  login$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(AuthActions.loginPage, AuthActions.loginModal),\r\n      concatMap((action) =>\r\n        this.authService.login(action.username, action.password).pipe(\r\n          map((user) => AuthActions.loginSuccess({ user: user })),\r\n          catchError((error) => of(AuthActions.loginFailure({ error })))\r\n        )\r\n      )\r\n    );\r\n  });\r\n\r\n  constructor(private actions$: Actions, private authService: AuthService) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-70703029ab14a35c33459024f0c6869a",
            "file": "src/app/modules/auth/resources/auth.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000/users/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "rawdescription": "\n"
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport * as fromAuthModels from './auth';\r\nimport { of, Observable, BehaviorSubject, throwError } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map, switchMap } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  /********************************************************************************** */\r\n  // This is a mock service, Don't use examples on this page in production code. Some APIs\r\n  //  might be totally fake, and Some business logic usually handled on the server\r\n  //   will be done on this page. This page is designed to give a back fake data.\r\n  /********************************************************************************** */\r\n  baseUrl: string = 'http://localhost:3000/users/';\r\n    // baseUrl = 'http://localhost:3000/users/';\r\n\r\n  constructor(private http: HttpClient) { }\r\n  // Fake Login API\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http.get(this.baseUrl + '?username=' + username).pipe(\r\n      switchMap((users) => {\r\n        let user = users[0];\r\n        if (user) {\r\n          return of(user);\r\n        } else {\r\n          return throwError('Unable to login');\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CategoryApiService",
            "id": "injectable-CategoryApiService-455a7e3b2a46034644508fb506f27fb5",
            "file": "src/app/modules/category/resources/category-api.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000/categories/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "createCategory",
                    "args": [
                        {
                            "name": "model",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editCategory",
                    "args": [
                        {
                            "name": "model",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Category",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Category[]>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCategory",
                    "args": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Category>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "categoryId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Category } from './model';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CategoryApiService {\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  baseUrl: string = 'http://localhost:3000/categories/';\r\n\r\n  createCategory(model: Category) {\r\n    return this.http.post(this.baseUrl, model);\r\n  }\r\n\r\n  getAllCategories(): Observable<Category[]> {\r\n    return this.http.get<Category[]>(this.baseUrl);\r\n  }\r\n\r\n  getCategory(categoryId: string): Observable<Category> {\r\n    return this.http.get<Category>(this.baseUrl + categoryId);\r\n  }\r\n\r\n  editCategory(model: Category): Observable<Category> {\r\n    return this.http.put<Category>(this.baseUrl + model.id, model);\r\n  }\r\n\r\n  deleteCategory(categoryId: number) {\r\n    return this.http.delete(this.baseUrl + categoryId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CustomerSupportEffects",
            "id": "injectable-CustomerSupportEffects-5c74bcedfc6e89b0116cf5c9999f17cc",
            "file": "src/app/store/effects/customer-support.effects.ts",
            "properties": [
                {
                    "name": "sendMessage$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(fromSupportActions.sendingCustomerSupportMessage),\r\n      mergeMap((action) =>\r\n        this.customerSupportService\r\n          .sendMessage(action.data)\r\n          .pipe(\r\n            map((bool) =>\r\n              fromSupportActions.sendMessageStatus({ isSentSuccess: bool })\r\n            )\r\n          )\r\n      )\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { CustomerSupportService } from '../../shared/services/customer-support.service';\r\nimport * as fromSupportActions from '../actions/customer-support.actions';\r\nimport { mergeMap, map } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class CustomerSupportEffects {\r\n  sendMessage$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(fromSupportActions.sendingCustomerSupportMessage),\r\n      mergeMap((action) =>\r\n        this.customerSupportService\r\n          .sendMessage(action.data)\r\n          .pipe(\r\n            map((bool) =>\r\n              fromSupportActions.sendMessageStatus({ isSentSuccess: bool })\r\n            )\r\n          )\r\n      )\r\n    );\r\n  });\r\n  constructor(\r\n    private actions$: Actions,\r\n    private customerSupportService: CustomerSupportService\r\n  ) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "customerSupportService",
                        "type": "CustomerSupportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "customerSupportService",
                        "type": "CustomerSupportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CustomerSupportService",
            "id": "injectable-CustomerSupportService-00d87fb1be9d2786a08878f8563f41b9",
            "file": "src/app/shared/services/customer-support.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "sendMessage",
                    "args": [
                        {
                            "name": "form",
                            "type": "CustomerMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "CustomerMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { CustomerMessage } from '../models/customer-message';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CustomerSupportService {\r\n  /********************************************************************************** */\r\n  // This is a mock service, Don't use examples on this page in production code. Some APIs\r\n  //  might be totally fake, and Some business logic usually handled on the server\r\n  //   will be done on this page. This page is designed to give a back mock data.\r\n  /********************************************************************************** */\r\n  constructor() {}\r\n\r\n  // This is a fake api call\r\n  sendMessage(form: CustomerMessage): Observable<boolean> {\r\n    return form.name ? of(true) : of(false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8,
                "rawdescription": "\n"
            },
            "type": "injectable"
        },
        {
            "name": "HelperCartService",
            "id": "injectable-HelperCartService-7a01146d6c6d018f02133f3fc4ed6451",
            "file": "src/app/modules/cart/resources/helper-shopping.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isProductsEmpty",
                    "args": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "productsSubTotal",
                    "args": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "productsTotalItems",
                    "args": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Product } from './cart';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HelperCartService {\r\n  constructor() {}\r\n\r\n  productsSubTotal(products: Product[]): number {\r\n    // let total: number = 0;\r\n    let total = 0;\r\n    // tslint:disable-next-line: prefer-for-of\r\n    for (let index = 0; index < products.length; index++) {\r\n      const element = products[index];\r\n      total = +element.price + total;\r\n    }\r\n    return parseFloat(total.toFixed(2));\r\n  }\r\n\r\n  productsTotalItems(products: Product[]): number {\r\n    return products ? products.length : 0;\r\n  }\r\n\r\n  isProductsEmpty(products: Product[]): boolean {\r\n    return products.length == 0 ? true : false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "HelperShoppingService",
            "id": "injectable-HelperShoppingService-1b636e6fd6f42c597714d7e64f61aadc",
            "file": "src/app/modules/products/resources/helper-shopping.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isProductsEmpty",
                    "args": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "productsSubTotal",
                    "args": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "productsTotalItems",
                    "args": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "products",
                            "type": "Product[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Product } from '../resources/product';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HelperShoppingService {\r\n  constructor() {}\r\n\r\n  productsSubTotal(products: Product[]): Observable<string> {\r\n    let total: number = 0;\r\n    for (let index = 0; index < products.length; index++) {\r\n      const element = products[index];\r\n      total = +element.price + total;\r\n    }\r\n    return of(total.toFixed(2));\r\n  }\r\n\r\n  productsTotalItems(products: Product[]): Observable<number> {\r\n    return of(products ? products.length : 0);\r\n  }\r\n\r\n  isProductsEmpty(products: Product[]): Observable<boolean> {\r\n    return of(products.length === 0 ? true : false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "MockApiCartService",
            "id": "injectable-MockApiCartService-cb071477a8a1060a2ffed17cb6e93e62",
            "file": "src/app/modules/cart/resources/mock-api-cart.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000/carts/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cart",
                    "defaultValue": "this.cartSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "cartSource",
                    "defaultValue": "new BehaviorSubject<Cart>({\r\n    id: null,\r\n    userid: null,\r\n    products: [],\r\n    isCartEmpty: null,\r\n    cartItemsLength: null,\r\n    productsSubtotal: null,\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCartByUserId",
                    "args": [
                        {
                            "name": "userid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cart>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userid",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCart",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cart",
                            "type": "Cart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Cart>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cart",
                            "type": "Cart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updatedCartSelection",
                    "args": [
                        {
                            "name": "cart",
                            "type": "Cart",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "cart",
                            "type": "Cart",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, of, throwError } from 'rxjs';\r\nimport { Cart } from './cart';\r\nimport { tap, switchMap } from 'rxjs/operators';\r\nimport { HelperCartService } from './helper-shopping.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MockApiCartService {\r\n  /********************************************************************************** */\r\n  // This is a mock service, Don't use examples on this page in production code. Some APIs\r\n  //  might be totally fake, and Some business logic usually handled on the server\r\n  //   will be done on this page. This page is designed to give a back fake data.\r\n  /********************************************************************************** */\r\n  constructor(private http: HttpClient, private helper: HelperCartService) {}\r\n\r\n  baseUrl: string = 'http://localhost:3000/carts/';\r\n\r\n  private cartSource = new BehaviorSubject<Cart>({\r\n    id: null,\r\n    userid: null,\r\n    products: [],\r\n    isCartEmpty: null,\r\n    cartItemsLength: null,\r\n    productsSubtotal: null,\r\n  });\r\n  cart = this.cartSource.asObservable();\r\n\r\n  getCartByUserId(userid: string): Observable<Cart> {\r\n    return this.http.get<Cart>(this.baseUrl + '?userid=' + userid).pipe(\r\n      switchMap((carts) => {\r\n        let cart: Cart = carts[0];\r\n        if (cart) {\r\n          cart.isCartEmpty = this.helper.isProductsEmpty(cart.products);\r\n          cart.cartItemsLength = this.helper.productsTotalItems(cart.products);\r\n          cart.productsSubtotal = this.helper.productsSubTotal(cart.products);\r\n          return of(cart);\r\n        } else {\r\n          return throwError('Unable to get shopping cart');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  updateCart(id: string, cart: Cart): Observable<Cart> {\r\n    return this.http.put<Cart>(this.baseUrl + id, cart).pipe(\r\n      switchMap((cart) => {\r\n        if (cart) {\r\n          cart.isCartEmpty = this.helper.isProductsEmpty(cart.products);\r\n          cart.cartItemsLength = this.helper.productsTotalItems(cart.products);\r\n          cart.productsSubtotal = this.helper.productsSubTotal(cart.products);\r\n          return of(cart);\r\n        } else {\r\n          return throwError('Unable to update shopping cart');\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  updatedCartSelection(cart: Cart) {\r\n    this.cartSource.next(cart);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "helper",
                        "type": "HelperCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "rawdescription": "\n",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "helper",
                        "type": "HelperCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MockProductApiService",
            "id": "injectable-MockProductApiService-9cd9fb395739c2939d8c47218e733ba9",
            "file": "src/app/modules/products/resources/mock-product-api.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000/'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "model",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editProduct",
                    "args": [
                        {
                            "name": "model",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "Product",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProduct",
                    "args": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "productId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PaginatedResult<Product[]>>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Product, PaginatedResult } from './product';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { PaginationService } from '../../../shared/services/pagination.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MockProductApiService {\r\n  /********************************************************************************** */\r\n  // This is a mock service, Don't use examples on this page in production code. Some APIs\r\n  //  might be totally fake, and Some business logic usually handled on the server\r\n  //   will be done on this page. This page is designed to give a back fake data.\r\n  /********************************************************************************** */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private pagination: PaginationService\r\n  ) { }\r\n\r\n  baseUrl: string = 'http://localhost:3000/';\r\n\r\n  createProduct(model: Product): Observable<Product> {\r\n    return this.http.post<Product>(this.baseUrl + 'products', model);\r\n  }\r\n\r\n  getProducts(url: string): Observable<PaginatedResult<Product[]>> {\r\n    let paginatedResult: PaginatedResult<Product[]> = {\r\n      result: undefined,\r\n      pagination: undefined,\r\n    };\r\n    return this.http\r\n      .get<Product[]>(url, { observe: 'response' })\r\n      .pipe(\r\n        map((response) => {\r\n          paginatedResult.result = response.body;\r\n\r\n          paginatedResult.pagination = this.pagination.parseReturnedPaginationUrls(\r\n            response.headers.get('Link')\r\n          );\r\n          return paginatedResult;\r\n        })\r\n      );\r\n  }\r\n\r\n  getAllProducts(): Observable<Product[]> {\r\n    return this.http.get<Product[]>(this.baseUrl + 'products');\r\n  }\r\n\r\n  getProduct(productId: string): Observable<Product> {\r\n    return this.http.get<Product>(this.baseUrl + 'products/' + productId);\r\n  }\r\n\r\n  editProduct(model: Product): Observable<Product> {\r\n    return this.http.put<Product>(this.baseUrl + 'products/' + model.id, model);\r\n  }\r\n\r\n  deleteProduct(productId: string) {\r\n    return this.http.delete(this.baseUrl + 'products/' + productId);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pagination",
                        "type": "PaginationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "rawdescription": "\n",
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pagination",
                        "type": "PaginationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModalEffects",
            "id": "injectable-ModalEffects-03e8f828300d0aa952f3f1902767bf2d",
            "file": "src/app/store/effects/modal.effects.ts",
            "properties": [
                {
                    "name": "hideModal$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap(() => this.modalService.hide())\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\n\r\nimport * as fromAuthActions from '../actions/auth.actions';\r\nimport { from } from 'rxjs';\r\nimport { ModalService } from '../../modules/auth/resources/modal.service';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class ModalEffects {\r\n  hideModal$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap(() => this.modalService.hide())\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  constructor(private actions$: Actions, private modalService: ModalService) { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ModalService",
            "id": "injectable-ModalService-9841116fbbc7afc21918401dcf0d0e73",
            "file": "src/app/modules/auth/resources/modal.service.ts",
            "properties": [
                {
                    "name": "modalRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BsModalRef",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BsModalService, BsModalRef } from 'ngx-bootstrap/modal';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ModalService {\r\n  modalRef: BsModalRef;\r\n  constructor(private modalService: BsModalService) {}\r\n\r\n  hide() {\r\n    if (this.modalRef) {\r\n      this.modalRef.hide();\r\n    }\r\n  }\r\n  show(component) {\r\n    this.modalRef = this.modalService.show(component, {\r\n      class: 'modal-lg',\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "modalService",
                        "type": "BsModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "PaginationpageService",
            "id": "injectable-PaginationpageService-f0ee0a87a85d62f62f983f9e40e9ed94",
            "file": "src/app/shared/services/paginationpage.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PaginationpageService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "PaginationService",
            "id": "injectable-PaginationService-ececb48581c78362d00aaabe7946d0fd",
            "file": "src/app/shared/services/pagination.service.ts",
            "properties": [
                {
                    "name": "pagination",
                    "defaultValue": "{\r\n    first: null,\r\n    next: null,\r\n    last: null,\r\n    prev: null,\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Pagination",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "createUrl",
                    "args": [
                        {
                            "name": "pricemin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'0'"
                        },
                        {
                            "name": "pricemax",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'999'"
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1'"
                        },
                        {
                            "name": "limit",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'9'"
                        },
                        {
                            "name": "baseurl",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pricemin",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'0'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pricemax",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'999'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'1'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'9'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "baseurl",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseReturnedPaginationUrls",
                    "args": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Pagination",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Pagination } from '../models/pagination';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PaginationService {\r\n  constructor() {}\r\n\r\n  pagination: Pagination = {\r\n    first: null,\r\n    next: null,\r\n    last: null,\r\n    prev: null,\r\n  };\r\n\r\n  parseReturnedPaginationUrls(data): Pagination {\r\n    var linkRegex = /\\<([^>]+)/g;\r\n    var relRegex = /rel=\"([^\"]+)/g;\r\n    var linkArray = [];\r\n    var relArray = [];\r\n    var finalResult: Pagination = this.pagination;\r\n    var temp;\r\n    while ((temp = linkRegex.exec(data)) != null) {\r\n      linkArray.push(temp[1]);\r\n    }\r\n    while ((temp = relRegex.exec(data)) != null) {\r\n      relArray.push(temp[1]);\r\n    }\r\n\r\n    finalResult = relArray.reduce((object, value, index) => {\r\n      object[value] = linkArray[index];\r\n      return object;\r\n    }, {});\r\n\r\n    return finalResult;\r\n  }\r\n\r\n  createUrl(\r\n    pricemin = '0',\r\n    pricemax = '999',\r\n    page = '1',\r\n    limit = '9',\r\n    baseurl\r\n  ): string {\r\n    var prepend = '';\r\n    //var query = this.baseUrl + 'products?';\r\n    var query = baseurl;\r\n    if (pricemin) {\r\n      query = `${query}` + prepend + `price_gte=${pricemin}`;\r\n      prepend = '&';\r\n    }\r\n    if (pricemax) {\r\n      query = `${query}` + prepend + `price_lte=${pricemax}`;\r\n      prepend = '&';\r\n    }\r\n    if (page) {\r\n      query = `${query}` + prepend + `_page=${page}`;\r\n      prepend = '&';\r\n    }\r\n    if (page) {\r\n      query = `${query}` + prepend + `_limit=${limit}`;\r\n      prepend = '&';\r\n    }\r\n\r\n    query = `${query}` + prepend + `_sort=price`;\r\n\r\n    return query;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "ProductEffects",
            "id": "injectable-ProductEffects-4371a6017bbb69c378488ae07fdd3355",
            "file": "src/app/modules/products/state/product.effects.ts",
            "properties": [
                {
                    "name": "createProduct$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.addProduct),\r\n      mergeMap((action) =>\r\n        this.productService.createProduct(action.product).pipe(\r\n          map((product) =>\r\n            ProductActions.addProductSuccess({ product: product })\r\n          ),\r\n          catchError((error) =>\r\n            of(ProductActions.addProductFailure({ error: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "rawdescription": "\n"
                },
                {
                    "name": "deleteProduct$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.deleteProduct, ProductActions.deleteItemProduct),\r\n      mergeMap((action) =>\r\n        this.productService.deleteProduct(action.productId).pipe(\r\n          map(() => ProductActions.deleteProductSuccess()),\r\n          catchError((error) =>\r\n            of(ProductActions.deleteProductFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "rawdescription": "\n"
                },
                {
                    "name": "loadProduct$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.loadProduct, ProductActions.loadAdminProduct),\r\n      mergeMap((action) =>\r\n        this.productService.getProduct(action.id).pipe(\r\n          map((product) =>\r\n            ProductActions.loadProductSuccess({ product: product })\r\n          ),\r\n          catchError((error) =>\r\n            of(ProductActions.loadProductFailure({ error: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "rawdescription": "\n"
                },
                {
                    "name": "loadProducts$",
                    "defaultValue": "createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(ProductActions.loadProducts, ProductActions.loadAdminProducts),\r\n      mergeMap((action) =>\r\n        this.productService.getProducts(action.url).pipe(\r\n          map((data) =>\r\n            ProductActions.loadProductsSuccess({ paginatedResult: data })\r\n          ),\r\n          catchError((error) =>\r\n            of(ProductActions.loadProductsFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    );\r\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "rawdescription": "\n"
                },
                {
                    "name": "updateProduct$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.upsertProduct),\r\n      mergeMap((action) =>\r\n        this.productService.editProduct(action.product).pipe(\r\n          map((product) => ProductActions.upsertProductSuccess({ product })),\r\n          catchError((error) =>\r\n            of(ProductActions.upsertProductFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "rawdescription": "\n"
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { MockProductApiService } from '../resources/mock-product-api.service';\r\nimport * as ProductActions from './product.actions';\r\nimport { mergeMap, map, catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ProductEffects {\r\n  /****************************************************************** */\r\n  /*****LOAD PRODUCTS API EFFECT ** */\r\n  /****************************************************************** */\r\n  loadProducts$ = createEffect(() => {\r\n    return this.actions$.pipe(\r\n      ofType(ProductActions.loadProducts, ProductActions.loadAdminProducts),\r\n      mergeMap((action) =>\r\n        this.productService.getProducts(action.url).pipe(\r\n          map((data) =>\r\n            ProductActions.loadProductsSuccess({ paginatedResult: data })\r\n          ),\r\n          catchError((error) =>\r\n            of(ProductActions.loadProductsFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    );\r\n  });\r\n\r\n  /****************************************************************** */\r\n  /*****LOAD PRODUCT API EFFECT ** */\r\n  /****************************************************************** */\r\n\r\n  loadProduct$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.loadProduct, ProductActions.loadAdminProduct),\r\n      mergeMap((action) =>\r\n        this.productService.getProduct(action.id).pipe(\r\n          map((product) =>\r\n            ProductActions.loadProductSuccess({ product: product })\r\n          ),\r\n          catchError((error) =>\r\n            of(ProductActions.loadProductFailure({ error: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  /****************************************************************** */\r\n  /*****CREATE PRODUCT API EFFECT ** */\r\n  /****************************************************************** */\r\n  createProduct$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.addProduct),\r\n      mergeMap((action) =>\r\n        this.productService.createProduct(action.product).pipe(\r\n          map((product) =>\r\n            ProductActions.addProductSuccess({ product: product })\r\n          ),\r\n          catchError((error) =>\r\n            of(ProductActions.addProductFailure({ error: error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  /****************************************************************** */\r\n  /*****UPDATE PRODUCT API EFFECT ** */\r\n  /****************************************************************** */\r\n  updateProduct$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.upsertProduct),\r\n      mergeMap((action) =>\r\n        this.productService.editProduct(action.product).pipe(\r\n          map((product) => ProductActions.upsertProductSuccess({ product })),\r\n          catchError((error) =>\r\n            of(ProductActions.upsertProductFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  /****************************************************************** */\r\n  /*****DELETE PRODUCT API EFFECT ** */\r\n  /****************************************************************** */\r\n  deleteProduct$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProductActions.deleteProduct, ProductActions.deleteItemProduct),\r\n      mergeMap((action) =>\r\n        this.productService.deleteProduct(action.productId).pipe(\r\n          map(() => ProductActions.deleteProductSuccess()),\r\n          catchError((error) =>\r\n            of(ProductActions.deleteProductFailure({ error }))\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  constructor(\r\n    private actions$: Actions,\r\n    private productService: MockProductApiService\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "MockProductApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 100,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "MockProductApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "RouteEffects",
            "id": "injectable-RouteEffects-994fcc6900cbd990cabe4ef54b0c26a2",
            "file": "src/app/store/effects/route.effects.ts",
            "properties": [
                {
                    "name": "gohome$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() => this.route.navigate(['/home']))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "goProductList$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromProductActions.upsertProductSuccess,\r\n          fromProductActions.deleteItemProduct\r\n        ),\r\n        tap(() => this.route.navigate(['/shopping/product-list']))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "goShopping$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap(() => this.route.navigate(['/shopping/products']))\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Router } from '@angular/router';\r\nimport * as fromAuthActions from '../actions/auth.actions';\r\nimport * as fromProductActions from '../../modules/products/state/product.actions';\r\nimport { tap } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class RouteEffects {\r\n  goShopping$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.loginSuccess),\r\n        tap(() => this.route.navigate(['/shopping/products']))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  gohome$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(fromAuthActions.logout),\r\n        tap(() => this.route.navigate(['/home']))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  goProductList$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromProductActions.upsertProductSuccess,\r\n          fromProductActions.deleteItemProduct\r\n        ),\r\n        tap(() => this.route.navigate(['/shopping/product-list']))\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  constructor(private actions$: Actions, private route: Router) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SpinnerEffects",
            "id": "injectable-SpinnerEffects-daebfdd853110b3eec3bcd4ab844dbf2",
            "file": "src/app/store/effects/spinner.effects.ts",
            "properties": [
                {
                    "name": "spinneroff$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromAuthActions.loginSuccess,\r\n          fromAuthActions.loginFailure,\r\n          fromProductActions.loadProductsFailure,\r\n          fromProductActions.loadProductsSuccess,\r\n          fromProductActions.loadProductFailure,\r\n          fromProductActions.loadProductSuccess,\r\n          fromProductActions.addProductSuccess,\r\n          fromProductActions.addProductFailure\r\n        ),\r\n        tap(() => {\r\n          setTimeout(() => {\r\n            this.spinner.hide();\r\n          }, 1000);\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "spinneron$",
                    "defaultValue": "createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromAuthActions.loginPage,\r\n          fromAuthActions.loginModal,\r\n          fromProductActions.loadProducts,\r\n          fromProductActions.loadAdminProducts,\r\n          fromProductActions.loadProduct,\r\n          fromProductActions.loadAdminProduct,\r\n          fromProductActions.addProduct\r\n        ),\r\n        tap(() => this.spinner.show())\r\n      ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport * as fromAuthActions from '../actions/auth.actions';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport * as fromProductActions from '../../modules/products/state/product.actions';\r\n\r\n@Injectable()\r\nexport class SpinnerEffects {\r\n  spinneron$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromAuthActions.loginPage,\r\n          fromAuthActions.loginModal,\r\n          fromProductActions.loadProducts,\r\n          fromProductActions.loadAdminProducts,\r\n          fromProductActions.loadProduct,\r\n          fromProductActions.loadAdminProduct,\r\n          fromProductActions.addProduct\r\n        ),\r\n        tap(() => this.spinner.show())\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  spinneroff$ = createEffect(\r\n    () =>\r\n      this.actions$.pipe(\r\n        ofType(\r\n          fromAuthActions.loginSuccess,\r\n          fromAuthActions.loginFailure,\r\n          fromProductActions.loadProductsFailure,\r\n          fromProductActions.loadProductsSuccess,\r\n          fromProductActions.loadProductFailure,\r\n          fromProductActions.loadProductSuccess,\r\n          fromProductActions.addProductSuccess,\r\n          fromProductActions.addProductFailure\r\n        ),\r\n        tap(() => {\r\n          setTimeout(() => {\r\n            this.spinner.hide();\r\n          }, 1000);\r\n        })\r\n      ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  constructor(private actions$: Actions, private spinner: NgxSpinnerService) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AdminGuard",
            "id": "injectable-AdminGuard-7ee7b1a85c6c140e48484c31f5d3a8e7",
            "file": "src/app/modules/auth/resources/admin.guard.ts",
            "properties": [
                {
                    "name": "user",
                    "defaultValue": "JSON.parse(localStorage.getItem('user'))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { User } from './auth';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminGuard implements CanActivate {\r\n  constructor(private router: Router) {}\r\n  user: User = JSON.parse(localStorage.getItem('user'));\r\n  canActivate(): boolean {\r\n    if (!this.user.isadmin) {\r\n      this.router.navigate(['/home']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-cf3edce73706c6fdb56403f1d72c97d8",
            "file": "src/app/modules/auth/resources/auth.guard.ts",
            "properties": [
                {
                    "name": "user",
                    "defaultValue": "localStorage.getItem('user')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private router: Router) {}\r\n  user = localStorage.getItem('user');\r\n  canActivate(): boolean {\r\n    if (!this.user) {\r\n      this.router.navigate(['/home']);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b0dda38f970a6690b77b35dfb293b3ac",
            "file": "e2e/src/app.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl) as Promise<unknown>;\r\n  }\r\n\r\n  getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<>",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-249e2f461fbb33f7e3173705e7aeb983",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'NGRX-Course'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = 'NGRX-Course';\r\n  constructor() {}\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"NGRX-Project\">\r\n  <ngx-alerts></ngx-alerts>\r\n  <ngx-spinner></ngx-spinner>\r\n  <app-top-bar></app-top-bar>\r\n  <app-header></app-header>\r\n  <app-footer></app-footer>\r\n\r\n  <router-outlet></router-outlet>\r\n</div>"
        },
        {
            "name": "AuthLinksComponent",
            "id": "component-AuthLinksComponent-6a741adda4a24d470b4ae42ab1f2aab4",
            "file": "src/app/modules/auth/auth-links/auth-links.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-auth-links",
            "styleUrls": [
                "./auth-links.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth-links.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "vm$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<fromAuthSelectors.AuthLinksViewModal>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthService } from '../resources/auth.service';\r\n\r\nimport * as fromAuthSelectors from '../../../store/selectors/auth.selectors';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\nimport { Observable } from 'rxjs';\r\nimport { logout } from '../../../store/actions/auth.actions';\r\n\r\n@Component({\r\n  selector: 'app-auth-links',\r\n  templateUrl: './auth-links.component.html',\r\n  styleUrls: ['./auth-links.component.scss'],\r\n})\r\nexport class AuthLinksComponent implements OnInit {\r\n  vm$: Observable<fromAuthSelectors.AuthLinksViewModal>;\r\n  constructor(\r\n    public authService: AuthService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.vm$ = this.store.pipe(\r\n      select(fromAuthSelectors.selectAuthLinksViewModel)\r\n    );\r\n  }\r\n\r\n  logout() {\r\n    this.store.dispatch(logout());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".auth-links a {\r\n  display: inline-block;\r\n  padding: 0px 10px;\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n  color:white;\r\n  background-color:orangered;\r\n  margin-top: 17px;\r\n}\r\n.auth-logout-link {\r\n  cursor: pointer;\r\n}\r\n.auth-admin-link {\r\n  background-color:rgb(156, 156, 154);\r\n}\r\n.user-link {\r\n  background-color:black;\r\n}\r\n.auth-links{\r\n  overflow: hidden;\r\n}\r\n@media only screen and (max-width: 700px) {\r\n  .logout{\r\n    margin-left: 70px;\r\n  }\r\n  .auth-admin-link{\r\n    margin-left: 55px;\r\n    }\r\n}\r\n",
                    "styleUrl": "./auth-links.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n<div class=\"auth-links\" *ngIf=\"vm$ | async as vm\">\r\n\t<a *ngIf=\"vm.isAdmin\" class=\"auth-admin-link\" [routerLink]=\"['/admin/product-list']\"><i class=\"fas fa-user-shield\"></i>\r\n\t\tAdmin</a>\r\n\t<a *ngIf=\"!vm.isAdmin && vm.isLoggedin\" class=\"user-link\" [routerLink]=\"['/shopping/products']\"><i class=\"fas fa-user\"></i> User</a>\r\n\t<!-- <a *ngIf=\"!vm.isLoggedin\" (click)=\"openModal()\"><i class=\"fas fa-sign-in-alt\"></i> Login Modal</a> -->\r\n\t<a *ngIf=\"!vm.isLoggedin\" [routerLink]=\"['/auth/login']\" routerLinkActive=\"active\" class=\"login\"><i class=\"fas fa-sign-in-alt\"></i> Login Page</a>\r\n\t\r\n\t<a *ngIf=\"vm.isLoggedin\" class=\"auth-logout-link\" [routerLink]=\" \" (click)=\"logout()\" class=\"logout\"><i class=\"fas fa-sign-out-alt\"></i> Logout</a>\r\n</div>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-1a8eb0e6303cf65d4c0d3ad5abc9f779",
            "file": "src/stories/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "template": "\n    <div class=\"row\">\n\t<div class=\"container\">\n\t\t<h1>Login</h1>\n\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"usernamelogin\">\n\t\t\t\tUsername</label>\n\t\t\t\t<input type=\"text\"\n\t\t\t\tname=\"username\"\n\t\t\t\tngModel\n\t\t\t\t#username required id=\"usernamelogin\"\n\t\t\t\tclass=\"inputdetails\"\n\t\t\t\t placeholder=\"user or admin\">\n\t\t\t</div>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"passwordlogin\">\n\t\t\t\tPassword</label>\n\t\t\t\t<input type=\"password\" name=\"password\"\n\t\t\t\t ngModel #password required\n\t\t\t\t id=\"passwordlogin\"\n\t\t\t\t class=\"inputdetails\"\n\t\t\t\t  placeholder=\"Password\"\n\t\t\t\t\t   autocomplete>\n\t\t\t</div>\n\t\t\t<div class=\"allbtn\">\n\t\t\t\t<button type=\"submit\" [disabled]=f.invalid class=\"btn\"><span>Login <i class=\"fas fa-sign-in-alt\"></i></span></button>\n          </div>\n\t\t</form>\n\n\t</div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'app-card',\r\n    template: `\r\n\r\n    <div class=\"row\">\r\n\t<div class=\"container\">\r\n\t\t<h1>Login</h1>\r\n\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"usernamelogin\">\r\n\t\t\t\tUsername</label>\r\n\t\t\t\t<input type=\"text\"\r\n\t\t\t\tname=\"username\"\r\n\t\t\t\tngModel\r\n\t\t\t\t#username required id=\"usernamelogin\"\r\n\t\t\t\tclass=\"inputdetails\"\r\n\t\t\t\t placeholder=\"user or admin\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"passwordlogin\">\r\n\t\t\t\tPassword</label>\r\n\t\t\t\t<input type=\"password\" name=\"password\"\r\n\t\t\t\t ngModel #password required\r\n\t\t\t\t id=\"passwordlogin\"\r\n\t\t\t\t class=\"inputdetails\"\r\n\t\t\t\t  placeholder=\"Password\"\r\n\t\t\t\t\t   autocomplete>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"allbtn\">\r\n\t\t\t\t<button type=\"submit\" [disabled]=f.invalid class=\"btn\"><span>Login <i class=\"fas fa-sign-in-alt\"></i></span></button>\r\n          </div>\r\n\t\t</form>\r\n\r\n\t</div>\r\n</div>\r\n    `,\r\n    styleUrls: ['./card.component.scss'],\r\n})\r\nexport class CardComponent { }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .container{\r\n//     display: flex;\r\n//     justify-content: center;\r\n//     align-items: center;\r\n//     font-family: 'Times New Roman', Times, serif;\r\n//     .card{\r\n//         width: auto;\r\n//         height: 200px;\r\n//         border: 1px solid black; \r\n//         display: flex;\r\n//         justify-content: center;\r\n//         flex-direction: column;\r\n//         align-items: center;\r\n//         border-radius: 2px;\r\n//         div{\r\n//             margin: 5px;\r\n//         }\r\n//         button{\r\n//             color: white;\r\n//             background-color: black;\r\n//             padding: 5px 5px 5px 5px;\r\n//             border-radius: 2px;\r\n//         }\r\n\r\n//         input{\r\n//             padding: 3px;\r\n//         }\r\n//     }  \r\n// }\r\n\r\n\r\n\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-dff02840b8703be4a1e7cdaa76d3c958-1",
            "file": "src/app/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "content",
                    "defaultValue": "'Card Content'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "subtitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClicked",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleBtnClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss']\r\n})\r\nexport class CardComponent {\r\n  @Input() title: any;\r\n  @Input() subtitle: any;\r\n  @Input() content = 'Card Content';\r\n  @Output() btnClicked = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  handleBtnClick(){\r\n    console.log('clicked');\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n    text-align: center;\r\n    background: white;\r\n    display: block;\r\n    padding: .45rem .65rem;\r\n    border-radius: 3px;\r\n    max-width: 325px;\r\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);\r\n  }\r\nh2 {\r\ncolor: #c85f7f;\r\n}\r\n\r\np {\r\ntext-align: center;\r\n}  ",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CardComponent-1",
            "templateData": "<h1>{{ title }}</h1>\r\n<h2>{{ subtitle }}</h2>\r\n\r\n<hr *ngIf=\"title || subtitle\">\r\n\r\n<p>{{ content }}</p>\r\n\r\n<button (click)=\"handleBtnClick()\">Click me!</button>\r\n"
        },
        {
            "name": "CartButtonWidgetComponent",
            "id": "component-CartButtonWidgetComponent-f575d036d6f9ae7a49a46db60cc6064d",
            "file": "src/app/modules/cart/cart-button-widget/cart-button-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart-button-widget",
            "styleUrls": [
                "./cart-button-widget.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart-button-widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Product"
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Cart",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "cartIconAdd",
                    "defaultValue": "'fas fa-cart-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "cartIconRemove",
                    "defaultValue": "'fas fa-shopping-cart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "color",
                    "defaultValue": "this.primaryColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "icon",
                    "defaultValue": "this.cartIconAdd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "primaryColor",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "removeColor",
                    "defaultValue": "'danger'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectedColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "manageCartlist",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setButtonSettings",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateCartApi",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { MockApiCartService } from '../resources/mock-api-cart.service';\r\nimport { AlertService } from 'ngx-alerts';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport { Product, Cart } from '../resources/cart';\r\nimport { User } from '../../../modules/auth/resources/auth';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\n\r\n@Component({\r\n  selector: 'app-cart-button-widget',\r\n  templateUrl: './cart-button-widget.component.html',\r\n  styleUrls: ['./cart-button-widget.component.scss'],\r\n})\r\nexport class CartButtonWidgetComponent implements OnInit {\r\n  @Input() product: Product;\r\n  @Input() text: string;\r\n\r\n  // selectedColor: string;\r\n  // primaryColor: string = 'success';\r\n  // removeColor: string = 'danger';\r\n  selectedColor: string;\r\n  primaryColor: string = 'success';\r\n  removeColor: string = 'danger';\r\n\r\n  // selectedColor: string = 'orange';\r\n  // primaryColor: string = 'orange';\r\n  // removeColor: string = 'orange';\r\n\r\n  cartIconAdd: string = 'fas fa-cart-plus';\r\n  cartIconRemove: string = 'fas fa-shopping-cart';\r\n\r\n  icon: string = this.cartIconAdd;\r\n  color: string = this.primaryColor;\r\n  cart: Cart;\r\n  user: User;\r\n\r\n  constructor(\r\n    private cartService: MockApiCartService,\r\n    private alertService: AlertService,\r\n    private spinner: NgxSpinnerService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.selectedColor = 'primary';\r\n    // this.primaryColor = 'success';\r\n    // this.removeColor = 'danger';\r\n    const observer = {\r\n      next: (user) => {\r\n        this.user = user;\r\n      },\r\n      error: (err) => console.error(err),\r\n    };\r\n\r\n    this.store.select((state) => state.auth.user).subscribe(observer);\r\n\r\n    if (this.user.id) {\r\n      const observer = {\r\n        next: (cart) => {\r\n          this.cart = cart;\r\n        },\r\n        error: (err) => console.error(err),\r\n      };\r\n      this.cartService.cart.subscribe(observer);\r\n      this.setButtonSettings();\r\n    }\r\n  }\r\n\r\n  updateCartApi(): void {\r\n    this.spinner.show();\r\n\r\n    const cartObserver = {\r\n      next: (cart) => {\r\n        setTimeout(() => {\r\n          this.spinner.hide();\r\n        }, 1000);\r\n        this.cartService.updatedCartSelection(cart);\r\n        setTimeout(() => {\r\n          this.alertService.success('Cart Updated');\r\n        }, 1000);\r\n      },\r\n      error: (err) => {\r\n        this.alertService.danger('Unable to Update Shopping Cart');\r\n        this.spinner.hide();\r\n      },\r\n    };\r\n\r\n    this.cartService\r\n      .updateCart(this.cart.id, this.cart)\r\n      .subscribe(cartObserver);\r\n  }\r\n\r\n  manageCartlist(): void {\r\n    this.color = this.primaryColor;\r\n    this.icon = this.cartIconAdd;\r\n\r\n    if (!this.user.id) {\r\n      this.alertService.danger('Please login to add to Shopping Cart');\r\n      return;\r\n    }\r\n\r\n    for (let index = 0; index < this.cart.products.length; index++) {\r\n      if (this.cart.products[index].id == this.product.id) {\r\n        this.alertService.info('Removing Product From Shopping Cart');\r\n        this.cart.products.splice(index, 1);\r\n        this.updateCartApi();\r\n        this.setButtonSettings();\r\n        return;\r\n      }\r\n    }\r\n    this.alertService.info('Adding Product To Shopping Cart');\r\n    this.cart.products.push(this.product);\r\n    this.updateCartApi();\r\n    this.setButtonSettings();\r\n  }\r\n\r\n  setButtonSettings() {\r\n    if (this.cart.products) {\r\n      for (let index = 0; index < this.cart.products.length; index++) {\r\n        if (this.cart.products[index].id == this.product.id) {\r\n          this.color = this.selectedColor;\r\n          this.icon = this.cartIconRemove;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".btn{\r\n    background-color:orangered;\r\n    // color:orange;\r\n    border: none;\r\n    color: white;\r\n    padding: 5px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 2px;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n    // margin-top: 10px;\r\n}",
                    "styleUrl": "./cart-button-widget.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "alertService",
                        "type": "AlertService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button type=\"button\" class=\"btn\" title=\"Add/Remove Shopping Cart\" \r\n(click)=\"manageCartlist()\"><i class=\"{{icon}}\"></i>\r\n\t{{text}}</button>"
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-f5e0a6170e2b2fd9c005528515df7f83",
            "file": "src/app/modules/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart",
            "styleUrls": [
                "./cart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Cart>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MockApiCartService } from './resources/mock-api-cart.service';\r\nimport { Cart } from './resources/cart';\r\n\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-cart',\r\n  templateUrl: './cart.component.html',\r\n  styleUrls: ['./cart.component.scss'],\r\n})\r\nexport class CartComponent implements OnInit {\r\n  cart$: Observable<Cart>;\r\n\r\n  constructor(private cartService: MockApiCartService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.cart$ = this.cartService.cart;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".cart-list-image img {\r\n  width: 100px;\r\n}\r\n.empty-cart-list-icon {\r\n  font-size: 150px;\r\n}\r\nh3{\r\n  color:orangered;\r\nmargin-left: 100px;}\r\n.tablehead{\r\n  color:orangered;\r\n}\r\ntable {\r\n  // margin-top: 8px;\r\n  font-family: arial, sans-serif;\r\n  // border-collapse: collapse;\r\n  width: 90%;\r\n  margin-left: 100px;\r\n  border:1px solid black;\r\n}\r\n\r\ntd, th {\r\n  border: 1px solid #dddddd;\r\n  text-align: left;\r\n  padding: 8px;\r\n}\r\n\r\n// tr:nth-child(even) {\r\n//   background-color:black;\r\n// }\r\n.cart-list{\r\n  padding:20px;\r\ntext-align: center;\r\n// margin-top: 5px;\r\n}\r\n.box{\r\n  // background-color: orangered;\r\n  width:550px;\r\n  height: 800px;\r\n  margin-left:337px;\r\n}\r\n\r\n@media only screen and (max-width:500px){\r\n  .cart-list-image img {\r\n    width: 100px;\r\n  }\r\n  .empty-cart-list-icon {\r\n    font-size: 150px;\r\n  }\r\n  h3{\r\n    color:orangered;\r\n  }\r\n  .tablehead{\r\n    color:orangered;\r\n  }\r\n  table {\r\n    // margin-top: 8px;\r\n    font-family: arial, sans-serif;\r\n    // border-collapse: collapse;\r\n    width: 90%;\r\n    margin-left: -10px;\r\n    border:1px solid black;\r\n  }\r\n  \r\n  td, th {\r\n    border: 1px solid #dddddd;\r\n    text-align: left;\r\n    padding: 8px;\r\n  }\r\n  \r\n  // tr:nth-child(even) {\r\n  //   background-color:black;\r\n  // }\r\n  .cart-list{\r\n    padding:20px;\r\n  text-align: center;\r\n  // margin-top: 5px;\r\n  }\r\n  .box{\r\n    // background-color: orangered;\r\n    width:500px;\r\n    margin-left:7px;\r\n    height: 700px;\r\n  }\r\n}",
                    "styleUrl": "./cart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"cart-list box\" *ngIf=\"cart$ | async as cart\">\r\n\t<h3 class=\"row\">Shopping Cart</h3>\r\n\r\n\r\n\r\n\t<div class=\"row\" *ngIf=\"cart.isCartEmpty; \r\n\telse showTableBlock\">\r\n\t\t<div class=\"\">\r\n\t\t\t<div class=\"empty-cart-list-icon\"><i class=\"fas fa-box-open\"></i></div>\r\n\t\t\t<div class=\"empty-cart-list-container\">\r\n\t\t\t\t<p>Shopping Cart IsEmpty </p>\r\n\t\t\t\t<p>Look for the add shopping cart button to save to the cart list while you shop.</p>\r\n\t\t\t\t<a class=\"btn\" [routerLink]=\"['/shopping/products']\"><i class=\"fas fa-store-alt\"></i> Start Shopping</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t<div #showTableBlock>\r\n\t\t<div class=\"row\">\r\n\t\t\t<table class=\"table\">\r\n\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr class=\"tablehead\">\r\n\t\t\t\t\t\t<th scope=\"col\">Image</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Name</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Price</th>\r\n\t\t\t\t\t\t<th scope=\"col\">Status</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\r\n\t\t\t\t\t<tr data-label=\"\"*ngFor=\"let product of cart.products\">\r\n\t\t\t\t\t\t<th scope=\"row\"><span class=\"cart-list-image\">\r\n\t\t\t\t\t\t<img src=\"{{product.imageUrl}}\"></span></th>\r\n\t\t\t\t\t\t<td class=\"tablehead\">{{product.name}}</td>\r\n\t\t\t\t\t\t<td class=\"tablehead\">{{product.price}}</td>\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<app-cart-button-widget \r\n\t\t\t\t\t\t[product]=\"product\" [text]=\"'Remove From Shopping Cart'\">\r\n\r\n\t\t\t\t\t\t</app-cart-button-widget>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t</tbody>\r\n\t\t\t\t<tfoot>\r\n\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th scope=\"row\"></th>\r\n\t\t\t\t\t\t<td class=\"tablehead\">Total Items : {{cart.cartItemsLength}}</td>\r\n\t\t\t\t\t\t<td class=\"tablehead\">Sub Total: ${{cart.productsSubtotal}}</td>\r\n\t\t\t\t\t<td></td>\r\n\t\t\t\t\t</tr>\r\n\r\n\t\t\t\t</tfoot>\r\n\r\n\t\t\t</table>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n\r\n\r\n</div>"
        },
        {
            "name": "CartLinkWidgetComponent",
            "id": "component-CartLinkWidgetComponent-11b148bd778445a020d47092e4249bec",
            "file": "src/app/modules/cart/cart-link-widget/cart-link-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart-link-widget",
            "styleUrls": [
                "./cart-link-widget.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cart-link-widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cart$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Cart>",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Cart } from '../resources/cart';\r\nimport { MockApiCartService } from '../resources/mock-api-cart.service';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-cart-link-widget',\r\n  templateUrl: './cart-link-widget.component.html',\r\n  styleUrls: ['./cart-link-widget.component.scss'],\r\n})\r\nexport class CartLinkWidgetComponent implements OnInit {\r\n  cart$: Observable<Cart>;\r\n\r\n  constructor(private cartService: MockApiCartService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.cart$ = this.cartService.cart;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .shopping-cart-link-container {\r\n//   position: relative;\r\n// }\r\n// .shopping-cart-link-container span {\r\n//   position: absolute;\r\n//   top: 5px;\r\n//   left: -8px;\r\n// }\r\n.shopingcaricon{\r\n  text-align: justify;\r\n  color:black;\r\n  list-style-type: none;\r\n  margin-left:800px;\r\n  margin-top:-15px;\r\n  font-size: 20px;\r\n\r\n}\r\n.nav{\r\n  color:black;\r\n  margin-top: 30px;\r\n  list-style-type: none;\r\n}\r\n.badge{\r\n  list-style-type: none;\r\n\r\n}\r\n",
                    "styleUrl": "./cart-link-widget.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"shopingcaricon\" *ngIf=\"cart$ | async as cart\">\r\n\t<span class=\"badge\" \r\n\t*ngIf=\"cart.products\">\r\n\t{{cart.products.length}}</span>\r\n\t<a class=\"nav\" \r\n\t[routerLink]=\"['/shopping/cart']\">\r\n\t<i class=\"fas fa-shopping-cart\"></i> Shopping Cart</a>\r\n</div>"
        },
        {
            "name": "CategoryAddComponent",
            "id": "component-CategoryAddComponent-082535ad501e9927eb01c2d00dc0786f",
            "file": "src/app/modules/category/category-add/category-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-add",
            "styleUrls": [
                "./category-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { NgForm } from '@angular/forms';\r\nimport { CategoryApiService } from '../resources/category-api.service';\r\n\r\n@Component({\r\n  selector: 'app-category-add',\r\n  templateUrl: './category-add.component.html',\r\n  styleUrls: ['./category-add.component.scss'],\r\n})\r\nexport class CategoryAddComponent implements OnInit {\r\n  constructor(\r\n    private categoryService: CategoryApiService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  onSubmit(f: NgForm) {\r\n    const categoryObserver = {\r\n      next: (category) => (\r\n        this.router.navigate(['/category/list']), console.log('success')\r\n      ),\r\n      error: (err) => console.error(err),\r\n    };\r\n\r\n    this.categoryService.createCategory(f.value).subscribe(categoryObserver);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  .row{\r\n    // background-image: url('../../../../assets/raphael-lovaski-pxax5WuM7eY-unsplash.jpg');\r\n    min-height: 75vh;\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: center;\r\n     background-position: center;\r\n     background-size: cover;\r\n     position:relative;\r\n\r\n  }\r\n \r\n  .container {\r\n    margin: auto;\r\n    width: 400px;\r\n    max-width: 590px;\r\n    margin-top: 20px;\r\n\r\n  }\r\n \r\n  .container form {\r\n    width: 400px;\r\n    height: 280px;\r\n    padding: 20px;\r\n    // background:orangered;\r\n    margin-top: 40px;\r\n    border-radius: 14px;\r\n    box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n  }\r\n \r\n  label {\r\n    color: white;\r\n  }\r\n \r\n  // .container form h1 {\r\n  //   text-align: center;\r\n  //   margin-bottom: 24px;\r\n  //   color: #222;\r\n  //   color: white;\r\n  // }\r\n \r\n  .container form .inputdetails {\r\n    width: 100%;\r\n    height: 40px;\r\n    background: white;\r\n    border-radius: 14px;\r\n    border: 1px solid silver;\r\n    margin: 10px 0 18px 0;\r\n    padding: 0 10px;\r\n  }\r\n \r\n  .container form .btn {\r\n    // margin-left: 50%;\r\n    margin-left:70px;\r\n    margin:10px;\r\n    transform: translateX(-50%);\r\n    width: 120px;\r\n    height: 34px;\r\n    border: none;\r\n    outline: none;\r\n    background:orangered;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    text-transform: uppercase;\r\n    color: white;\r\n    border-radius: 4px;\r\n    transition: .3s;\r\n  }\r\n \r\n \r\n  .container form .btn:hover {\r\n    opacity: .8;\r\n  }\r\n h1{\r\n     text-align: center;\r\n     margin-top: 50px;\r\n     color:orangered;\r\n }\r\n.allbtn{\r\n    display: flex;\r\n    flex-direction: row;\r\n    height:20px;\r\n    width:px;\r\n    margin-left: 100px;\r\n}\r\n  @media only screen and (max-width: 700px) {\r\n    .container {\r\n      width: 100%;\r\n    }\r\n    .form {\r\n      width: 90%;\r\n      margin: auto;\r\n    }\r\n  }\r\n  @media only screen and (max-width: 320px) {\r\n    .container {\r\n      width: 100%;\r\n    }\r\n    .form {\r\n      width: 50%;\r\n      margin: auto;\r\n    }\r\n    .container form {\r\n      width: 300px;\r\n      height: 200px;\r\n      padding: 20px;\r\n      // background:orangered;\r\n      margin-top: 40px;\r\n      border-radius: 14px;\r\n      box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n    }\r\n    .container form .btn {\r\n      // margin-left: 50%;\r\n      margin-left:140px;\r\n      margin:10px;\r\n      // margin-top: 100px;\r\n      transform: translateX(-50%);\r\n      width: 120px;\r\n      height: 34px;\r\n      border: none;\r\n      outline: none;\r\n      background:orangered;\r\n      cursor: pointer;\r\n      font-size: 16px;\r\n      text-transform: uppercase;\r\n      color: white;\r\n      border-radius: 4px;\r\n      transition: .3s;\r\n    }\r\n  \r\n  \r\n  }",
                    "styleUrl": "./category-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "categoryService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n\t<div class=\"container\">\r\n\t\t<h1>Add Category</h1>\r\n\t\t<div>\r\n\t\t\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"categoryName\">Category Name</label>\r\n\t\t\t\t<input type=\"text\" ngModel \r\n\t\t\t\trequired name=\"name\"\r\n\t\t\t\t class=\"inputdetails\" \r\n\t\t\t\t id=\"categoryName\" placeholder=\"Name\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"categoryDescription\">Description</label>\r\n\t\t\t\t<textarea class=\"inputdetails\" ngModel name=\"description\" id=\"categoryDescription\"\r\n\t\t\t\tplaceholder=\"Category Description\"></textarea>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"allbtn\">\r\n\r\n\t\t\t<button class=\"btn btn-primary m-1\" [routerLink]=\"['/category/list']\"><i class=\"fas fa-arrow-left\"></i> Back To List</button>\r\n\t\t\t<button class=\"btn btn-success m-1\" type=\"submit\" [disabled]=\"f.invalid\">Add Category <i class=\"fas fa-plus\"></i></button>\r\n\t\t</div>\r\n\t\t</form>\r\n\t</div>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "CategoryEditComponent",
            "id": "component-CategoryEditComponent-d21d811b595512f2f3fde3dadb128ef8",
            "file": "src/app/modules/category/category-edit/category-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-edit",
            "styleUrls": [
                "./category-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CategoryApiService } from '../resources/category-api.service';\r\n\r\n@Component({\r\n  selector: 'app-category-edit',\r\n  templateUrl: './category-edit.component.html',\r\n  styleUrls: ['./category-edit.component.scss'],\r\n})\r\nexport class CategoryEditComponent implements OnInit {\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private categoryService: CategoryApiService\r\n  ) {}\r\n  model: any = {};\r\n\r\n  ngOnInit() {\r\n    this.categoryService\r\n      .getCategory(this.route.snapshot.paramMap.get('id'))\r\n      .subscribe((category) => (this.model = category));\r\n  }\r\n\r\n  onSubmit() {\r\n    const categoryObserver = {\r\n      next: (category) => {\r\n        this.router.navigate(['/category/list']), console.log('success');\r\n      },\r\n      error: (err) => console.error(err),\r\n    };\r\n    console.log(this.model);\r\n    this.categoryService.editCategory(this.model).subscribe(categoryObserver);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  .row{\r\n    // background-image: url('../../../../assets/raphael-lovaski-pxax5WuM7eY-unsplash.jpg');\r\n    min-height: 80vh;\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: center;\r\n     background-position: center;\r\n     background-size: cover;\r\n     position:relative;\r\n\r\n  }\r\n \r\n  .container {\r\n    margin: auto;\r\n    width: 400px;\r\n    max-width: 590px;\r\n    margin-top: 20px;\r\n\r\n  }\r\n \r\n  .container form {\r\n    width: 400px;\r\n    height: 280px;\r\n    padding: 20px;\r\n    // background:orangered;\r\n    margin-top: 40px;\r\n    border-radius: 14px;\r\n    box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n  }\r\n \r\n  label {\r\n    color: white;\r\n  }\r\n \r\n  .container form h1 {\r\n    text-align: center;\r\n    margin-bottom: 24px;\r\n    color: #222;\r\n    color: white;\r\n  }\r\n \r\n  .container form .inputdetails {\r\n    width: 100%;\r\n    height: 40px;\r\n    background: white;\r\n    border-radius: 14px;\r\n    border: 1px solid silver;\r\n    margin: 10px 0 18px 0;\r\n    padding: 0 10px;\r\n  }\r\n \r\n  .container form .btn {\r\n    // margin-left: 50%;\r\n    margin-left:70px;\r\n    margin:10px;\r\n    transform: translateX(-50%);\r\n    width: 120px;\r\n    height: 34px;\r\n    border: none;\r\n    outline: none;\r\n    background:orangered;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    text-transform: uppercase;\r\n    color: white;\r\n    border-radius: 4px;\r\n    transition: .3s;\r\n  }\r\n \r\n \r\n  .container form .btn:hover {\r\n    opacity: .8;\r\n  }\r\n h2{\r\n     text-align: center;\r\n     margin-top: 40px;\r\n     color: orangered;\r\n }\r\n.allbtn{\r\n    display: flex;\r\n    flex-direction: row;\r\n    height:20px;\r\n    width:px;\r\n    margin-left: 100px;\r\n}\r\n  @media only screen and (max-width: 700px) {\r\n    .container {\r\n      width: 100%;\r\n    }\r\n    .form {\r\n      width: 90%;\r\n      margin: auto;\r\n    }\r\n  }",
                    "styleUrl": "./category-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n\t<div class=\"container\">\r\n\t\t<h2>Edit Category</h2>\r\n\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit()\">\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"categoryName\">Category Name</label>\r\n\t\t\t\t<input type=\"text\" class=\"inputdetails\" name=\"name\" required [(ngModel)]=\"model.name\" id=\"categoryName\" placeholder=\"Name\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"categoryDescription\">Description</label>\r\n\t\t\t\t<textarea class=\"inputdetails\" id=\"categoryDescription\" name=\"description\" required [(ngModel)]=\"model.description\"\r\n\t\t\t\t\t\t  placeholder=\"Category Description\"></textarea>\r\n\t\t\t</div>\r\n\t\t\t\t<div class=\"allbtn\">\r\n\t\t\t<button class=\"btn\" [routerLink]=\"['/category/list']\" type=\"submit\"><i class=\"fas fa-arrow-left\"></i> Back To\r\n\t\t\t\tList</button>\r\n\t\t\t<button class=\"btn\" type=\"submit\" [disabled]=\"f.invalid\">Edit <i class=\"fas fa-edit\"></i></button>\r\n\t\t</div>\r\n\t\t</form>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "CategoryItemComponent",
            "id": "component-CategoryItemComponent-32012bbeb9d98d6d59e85afa9d7fe38c",
            "file": "src/app/modules/category/category-item/category-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-item",
            "styleUrls": [
                "./category-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "category$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Category>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Category } from '../resources/model';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CategoryApiService } from '../resources/category-api.service';\r\n\r\n@Component({\r\n  selector: 'app-category-item',\r\n  templateUrl: './category-item.component.html',\r\n  styleUrls: ['./category-item.component.scss'],\r\n})\r\nexport class CategoryItemComponent implements OnInit {\r\n  category$: Observable<Category>;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private categoryService: CategoryApiService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.category$ = this.categoryService.getCategory(\r\n      this.route.snapshot.paramMap.get('id')\r\n    );\r\n  }\r\n\r\n  deleteCategory(id: number) {\r\n    const categoryObserver = {\r\n      next: () => {\r\n        console.log('Category Deleted');\r\n        this.router.navigate(['/category/list']);\r\n      },\r\n      error: (err) => console.error(err),\r\n    };\r\n    this.categoryService.deleteCategory(id).subscribe(categoryObserver);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  \r\n    align-content:stretch;\r\n    \r\n  \r\n  }\r\n  h4{\r\n    text-align: center;\r\n  }\r\n  .text-right{\r\n    text-align: center;\r\n  }\r\n  .alldatalist{\r\n    text-align: center;\r\n  }\r\n  .card-title{\r\n  font-size: 25px;\r\n  }\r\n  \r\n  // .container{\r\n  //   display: flex;\r\n  //   // background-color:burlywood;\r\n  //   color: white;\r\n  // }\r\n  .addbtn{\r\n    text-decoration: none;\r\n    color:orange;\r\n    border: 2px solid orangered;\r\n    padding:12px 14px;\r\n    font-size: 14px;\r\n    background: transparent;\r\n    position: relative;\r\n    cursor: pointer;\r\n    margin-top:30px;\r\n    margin-left:650px;\r\n  \r\n  }\r\n  .addbtn:hover{\r\n    border: 1px solid orangered;\r\n    background: orangered;\r\n    transition: 1s;\r\n  }\r\n  .btn{\r\n    border: none;\r\n    background-color: orangered;\r\n    color: white;\r\n    padding: 10px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 8px;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n  \r\n  }\r\n  \r\n  .card{\r\n    margin:20px;\r\n    min-height: 200px;\r\n    background:#fff3f3;\r\n    border-radius: 10px;\r\n    // margin-bottom: 15%;\r\n    padding:50px 12px;\r\n    box-sizing: border-box;\r\n    color: orangered;\r\n    text-align: center;\r\n    height: 210px;\r\n    width: 250px; \r\n    // margin-top: 20px;\r\n    // margin-left: 50px;\r\n    // display: flex;\r\n    // flex-direction: row;\r\n    margin-left: 540px;\r\n    \r\n  }\r\n  .card-title{\r\n    text-align: center;\r\n  }\r\n  \r\n  // .card-list{\r\n  //    display: flex;\r\n  //    flex-direction: row;\r\n  //  }\r\n  .card-img-top{\r\n    width: 240px;\r\n    height: 150px;\r\n  }\r\n  .card-title{\r\n    font-size: 22px;\r\n    margin: 0;\r\n  }\r\n  .card-text{\r\n    font-size: 16px;\r\n  }\r\n   .card-body{\r\n    line-height: 1;\r\n  \r\n   } \r\n  h1{\r\n    text-align: center;\r\n    color: orangered;\r\n  }\r\n  \r\n  // // .addbtn{\r\n  // //     background-color: orangered;\r\n  // //     margin-left: 540px;\r\n  // //     font-size: 18px;\r\n  // //     height:50px;\r\n  // //     border-radius: 2px solid white;\r\n  // // }\r\n  ",
                    "styleUrl": "./category-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "categoryService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\t<div class=\"row-card\">\r\n\t<h1>Category Detail</h1>\r\n\r\n\t<div class=\"row\">\r\n\t\t<!-- <div class=\"card\"> -->\r\n\t\t\t<div class=\"card\" *ngIf=\"category$ | async as category\">\r\n\r\n\t\t\t<div class=\"card-list\">\r\n\r\n\t\t\t<div class=\"card-body\">\r\n\t\t\t\t<h5 class=\"card-title\">{{category.name}}</h5>\r\n\t\t\t\t<p class=\"card-text\">{{category.description}}\r\n\t\t\t\t</p>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"allbtn\">\r\n\t\t\t\t<button type=\"button\" class=\"btn\" [routerLink]=\"['/category/edit', category.id]\">Edit <i\r\n\t\t\t\t\t\tclass=\"fas fa-edit\"></i></button>\r\n\t\t\t\t<button type=\"button\" (click)=\"deleteCategory(category.id)\" class=\"btn\">Remove <i\r\n\t\t\t\t\t\tclass=\"fas fa-trash\"></i></button>\r\n\t\t\t   <button class=\"btn\" [routerLink]=\"['/category/list']\" routerLinkActive=\"router-link-active\"><i\r\n\t\t\t\t\tclass=\"fas fa-arrow-left\"></i>\r\n\t\t\t\tBack To List</button>\r\n\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t\t<!-- </div> -->\r\n\t\t</div>\r\n\t\t\r\n\t</div>\r\n\r\n</div>\r\n</div>"
        },
        {
            "name": "CategoryListComponent",
            "id": "component-CategoryListComponent-47699429bfef3ff2b1795b8016e318c2",
            "file": "src/app/modules/category/category-list/category-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-category-list",
            "styleUrls": [
                "./category-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./category-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "categories$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Category[]>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteCategory",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCategories",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Category } from '../resources/model';\r\nimport { CategoryApiService } from '../resources/category-api.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-category-list',\r\n  templateUrl: './category-list.component.html',\r\n  styleUrls: ['./category-list.component.scss'],\r\n})\r\nexport class CategoryListComponent implements OnInit {\r\n  categories$: Observable<Category[]>;\r\n\r\n  constructor(\r\n    private categoryApiService: CategoryApiService,\r\n    public router: Router,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loadCategories();\r\n  }\r\n\r\n  loadCategories() {\r\n    this.categories$ = this.categoryApiService.getAllCategories();\r\n  }\r\n\r\n  deleteCategory(id: number) {\r\n    const categoryObserver = {\r\n      next: () => {\r\n        console.log('Category Deleted');\r\n        this.ngOnInit();\r\n      },\r\n      error: (err) => console.error(err),\r\n    };\r\n    this.categoryApiService.deleteCategory(id).subscribe(categoryObserver);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row{\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n\r\n  align-content:stretch;\r\n  \r\n\r\n}\r\nh4{\r\n  text-align: center;\r\n}\r\n.text-right{\r\n  text-align: center;\r\n}\r\n.alldatalist{\r\n  text-align: center;\r\n}\r\n.card-title{\r\nfont-size: 25px;\r\n}\r\n\r\n// .container{\r\n//   display: flex;\r\n//   // background-color:burlywood;\r\n//   color: white;\r\n// }\r\n.addbtn{\r\n  text-decoration: none;\r\n  color:orange;\r\n  border: 2px solid orangered;\r\n  padding:12px 14px;\r\n  font-size: 14px;\r\n  background: transparent;\r\n  position: relative;\r\n  cursor: pointer;\r\n  margin-top:30px;\r\n  margin-left:570px;\r\n  }\r\n.addbtn:hover{\r\n  border: 1px solid orangered;\r\n  background: orangered;\r\n  transition: 1s;\r\n}\r\n.btn{\r\n  border: none;\r\n  background-color: orangered;\r\n  color: white;\r\n  padding: 10px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-size: 16px;\r\n  margin: 4px 10px;\r\n  cursor: pointer;\r\n  border-radius: 10px;\r\n\r\n}\r\n\r\n.card{\r\n  margin:20px;\r\n  min-height: 200px;\r\n  background:#fff3f3;\r\n  border-radius: 10px;\r\n  // margin-bottom: 15%;\r\n  padding:50px 12px;\r\n  box-sizing: border-box;\r\n  color: orangered;\r\n  text-align: center;\r\n  height: 210px;\r\n  width: 250px; \r\n  // margin-top: 20px;\r\n  margin-left: 50px;\r\n  // display: flex;\r\n  // flex-direction: row;\r\n  \r\n}\r\n.card-title{\r\n  text-align: center;\r\n}\r\n\r\n// .card-list{\r\n//    display: flex;\r\n//    flex-direction: row;\r\n//  }\r\n.card-img-top{\r\n  width: 240px;\r\n  height: 150px;\r\n}\r\n.card-title{\r\n  font-size: 22px;\r\n  margin: 0;\r\n}\r\n.card-text{\r\n  font-size: 16px;\r\n}\r\n .card-body{\r\n  line-height: 1;\r\n\r\n } \r\nh1{\r\n  text-align: center;\r\n  color:orangered;\r\n  margin-left: -50px;\r\n}\r\n\r\n// // .addbtn{\r\n// //     background-color: orangered;\r\n// //     margin-left: 540px;\r\n// //     font-size: 18px;\r\n// //     height:50px;\r\n// //     border-radius: 2px solid white;\r\n// // }\r\n@media only screen and (max-width:320px) {\r\n  .addbtn{\r\n    text-decoration: none;\r\n    color:orange;\r\n    border: 2px solid orangered;\r\n    padding:12px 14px;\r\n    font-size: 14px;\r\n    background: transparent;\r\n    // position: relative;\r\n    cursor: pointer;\r\n    margin-top:30px;\r\n    margin-left:70px;\r\n    }\r\n  .addbtn:hover{\r\n    border: 1px solid orangered;\r\n    background: orangered;\r\n    transition: 1s;\r\n  }\r\n  \r\n}\r\n@media only screen and (max-width:500px) {\r\n  .addbtn{\r\n    text-decoration: none;\r\n    color:orange;\r\n    border: 2px solid orangered;\r\n    padding:12px 14px;\r\n    font-size: 14px;\r\n    background: transparent;\r\n    // position: relative;\r\n    cursor: pointer;\r\n    margin-top:30px;\r\n    margin-left:150px;\r\n    }\r\n  .addbtn:hover{\r\n    border: 1px solid orangered;\r\n    background: orangered;\r\n    transition: 1s;\r\n  }\r\n  h1{\r\n    text-align: center;\r\n    color:orangered;\r\n    // margin-left: 8px;\r\n  }\r\n  .card{\r\n    margin:20px;\r\n    min-height: 200px;\r\n    background:#fff3f3;\r\n    border-radius: 10px;\r\n    // margin-bottom: 15%;\r\n    padding:50px 12px;\r\n    box-sizing: border-box;\r\n    color: orangered;\r\n    text-align: center;\r\n    height: 210px;\r\n    width: 250px; \r\n    // margin-top: 20px;\r\n    margin-left: 110px;\r\n    // display: flex;\r\n    // flex-direction: row;\r\n    \r\n  }\r\n  \r\n}",
                    "styleUrl": "./category-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "categoryApiService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "categoryApiService",
                        "type": "CategoryApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n<div class=\"row-card\">\r\n  <!-- <div>\r\n\t <button type=\"button\" class=\"addbtn\" class=\"addbtn\" [routerLink]=\"['/category/add']\">Add New Product <i\r\n\t\t\tclass=\"fas fa-plus\"></i></button>\r\n\t\t</div> -->\r\n\r\n\t<div class=\"add\" *ngIf=\"categories$ | async as categories\">\r\n\t\t<button type=\"button\" class=\"addbtn\" [routerLink]=\"['/category/add']\">Add New Product \r\n\t\t\t\r\n<i class=\"fas fa-plus\"></i></button>\r\n\t\t\t\r\n\t\t<h1>Categories</h1>\r\n\t\t\r\n<div class=\"row\">\r\n\t\t<div class=\"card\" *ngFor=\"let category of categories\">\r\n\t\t\t<div class=\"card-list\">\r\n\t\t\t\t<div class=\"card-body\">\r\n\t\t\t\t\t<h6 class=\"card-title\">{{category.name}}</h6>\r\n\t\t\t\t\t<p class=\"card-text\">Descripion : {{category.description}}</p>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"allbtn\">\r\n\t\t\t\t\t<div class=\"btn-group\">\r\n\t\t\t\t\t\t<button type=\"button\" class=\"btn\" [routerLink]=\"['/category/item', category.id]\"><i\r\n\t\t\t\t\t\t\t\tclass=\"fas fa-search\"></i></button>\r\n\t\t\t\t\t\t<button type=\"button\" class=\"btn\" [routerLink]=\"['/category/edit', category.id]\"><i\r\n\t\t\t\t\t\t\t\tclass=\"fas fa-edit\"></i></button>\r\n\t\t\t\t\t\t<button type=\"button\" class=\"btn\" (click)=\"deleteCategory(category.id)\"><i\r\n\t\t\t\t\t\t\t\tclass=\"fas fa-trash\"></i></button>\r\n\t\t\t\t\t\t<!-- <button type=\"button\" class=\"btn btn-secondary\">Load More</button> -->\r\n\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n\t</div>\r\n\t<!-- <div class=\"row\">\r\n\t\t\t<div class=\"\">\r\n\t\t\t\t<button type=\"button\" class=\"btn btn-secondary\">Load More</button>\r\n\t\t\t</div>\r\n\t\t</div> -->\r\n\r\n\t<!-- </div> -->\r\n</div>\r\n</div>"
        },
        {
            "name": "CoreComponent",
            "id": "component-CoreComponent-b3e5df2fda706cc640b83e6b8367ab59",
            "file": "src/app/core/core.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-core",
            "styleUrls": [
                "./core.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./core.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateShoppingCart",
                    "args": [
                        {
                            "name": "userid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { User } from '../modules/auth/resources/auth';\r\nimport { MockApiCartService } from '../modules/cart/resources/mock-api-cart.service';\r\nimport { AppState } from '../store';\r\nimport { Store } from '@ngrx/store';\r\nimport { browserReload } from '../store/actions/auth.actions';\r\n\r\n@Component({\r\n  selector: 'app-core',\r\n  templateUrl: './core.component.html',\r\n  styleUrls: ['./core.component.scss'],\r\n})\r\nexport class CoreComponent implements OnInit {\r\n  constructor(\r\n    private cartService: MockApiCartService,\r\n    private store: Store<AppState>\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const user: User = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (user) {\r\n      this.updateShoppingCart(user.id);\r\n\r\n      this.store.dispatch(browserReload({ user:user}));\r\n    }\r\n  }\r\n\r\n  updateShoppingCart(userid) {\r\n    const observer = {\r\n      next: (cart) => {\r\n        this.cartService.updatedCartSelection(cart);\r\n      },\r\n      error: (err) => console.error(err),\r\n    };\r\n    this.cartService.getCartByUserId(userid).subscribe(observer);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// @import \"~bootswatch/dist/cosmo/variables\";\r\n.customer-support-button-container {\r\n  position: fixed;\r\n  right: 50px;\r\n  bottom: 50px;\r\n}\r\n.support-out-icon {\r\n  font-size: 30px;\r\n  border: solid black 2px;\r\n  border-radius: 100%;\r\n  width: 60px;\r\n  height: 60px;\r\n  padding: 10px;\r\n  text-align: center;\r\n  background-color:orangered;\r\n  color: green;\r\n}\r\n",
                    "styleUrl": "./core.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\t<router-outlet></router-outlet>\r\n</div>\r\n<!-- <div class=\"customer-support-button-container\">\r\n\t<a class=\"support-out-icon\" [routerLink]=\"['/support']\"><i class=\"fas fa-people-carry\"></i></a>\r\n</div> -->\r\n"
        },
        {
            "name": "CourseListComponent",
            "id": "component-CourseListComponent-3f6f4fb477cdb8e846ffccf9487d7976",
            "file": "src/app/shared/course-list/course-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-course-list",
            "styleUrls": [
                "./course-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./course-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-course-list',\r\n  templateUrl: './course-list.component.html',\r\n  styleUrls: ['./course-list.component.scss']\r\n})\r\nexport class CourseListComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./course-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>course-list works!</p>\r\njnguysd"
        },
        {
            "name": "CustomerSupportComponent",
            "id": "component-CustomerSupportComponent-2fe31bc94bf35f75a631c6ce9b85987f",
            "file": "src/app/pages/customer-support/customer-support.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-customer-support",
            "styleUrls": [
                "./customer-support.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./customer-support.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isSendSuccess",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "vm$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<fromSelectors.CustomerSupportViewModel>",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "clearFeedback",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { CustomerSupportService } from '../../shared/services/customer-support.service';\r\nimport { Observable } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../store';\r\nimport {\r\n  sendingCustomerSupportMessage,\r\n  clearForm,\r\n} from '../../store/actions/customer-support.actions';\r\nimport * as fromSelectors from '../../store/selectors/customer-support.selectors';\r\n\r\n@Component({\r\n  selector: 'app-customer-support',\r\n  templateUrl: './customer-support.component.html',\r\n  styleUrls: ['./customer-support.component.scss'],\r\n})\r\nexport class CustomerSupportComponent implements OnInit {\r\n  constructor(\r\n    private customerSupportService: CustomerSupportService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  isSendSuccess: boolean | null = null;\r\n\r\n  vm$: Observable<fromSelectors.CustomerSupportViewModel>;\r\n\r\n  ngOnInit(): void {\r\n    this.vm$ = this.store.pipe(\r\n      select(fromSelectors.selectCustomerSupportModel)\r\n    );\r\n  }\r\n\r\n  onSubmit(f: NgForm) {\r\n    this.store.dispatch(sendingCustomerSupportMessage({ data: f.value }));\r\n  }\r\n\r\n  clearFeedback() {\r\n    this.store.dispatch(clearForm());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".support-out-icon {\r\n  font-size: 30px;\r\n  border: solid black 2px;\r\n  border-radius: 100%;\r\n  width: 60px;\r\n  height: 60px;\r\n  padding-top: 5px;\r\n  text-align: center;\r\n  background-color: green;\r\n  color:orange;\r\n}\r\n",
                    "styleUrl": "./customer-support.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "customerSupportService",
                        "type": "CustomerSupportService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "customerSupportService",
                        "type": "CustomerSupportService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div *ngIf=\"vm$ | async as vm\">\r\n\t<h3 class=\"mt-4 mb-4\">Customer Support</h3>\r\n\r\n\t<div>\r\n\t\t<div>\r\n\t\t\t<div class=\"row\">\r\n\t\t\t\t<div class=\"col-10\">\r\n\t\t\t\t\t<h4 class=\"mt-2\">We are here to help!</h4>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"col-2\">\r\n\t\t\t\t\t<div class=\"support-out-icon\"><i class=\"fas fa-hands-helping\"></i></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\r\n\r\n\t\t\t\t<div class=\"form-row\">\r\n\t\t\t\t\t<div class=\"form-group col-md-6\">\r\n\t\t\t\t\t\t<label for=\"inputName\">Name</label>\r\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputName\" name=\"name\" ngModel>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"form-group col-md-6\">\r\n\t\t\t\t\t\t<label for=\"inputEmail\">Email</label>\r\n\t\t\t\t\t\t<input type=\"text\" class=\"form-control\" id=\"inputEmail\" name=\"email\" ngModel>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<label for=\"inputMessage\">Message</label>\r\n\t\t\t\t\t<textarea class=\"form-control\" id=\"inputMessage\" rows=\"3\" ngModel name=\"message\"></textarea>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ng-container *ngIf=\"vm.isSentSuccess != null\">\r\n\t\t\t\t\t<div class=\"alert alert-dismissible alert-success\" *ngIf=\"vm.isSentSuccess\">\r\n\t\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\" (click)=\"clearFeedback()\">&times;</button>\r\n\t\t\t\t\t\t<strong>We got your message {{vm.name}}!</strong> We will be in touch.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"alert alert-dismissible alert-danger\" *ngIf=\"!vm.isSentSuccess\">\r\n\t\t\t\t\t\t<button type=\"button\" class=\"close\" data-dismiss=\"alert\" (click)=\"clearFeedback()\">&times;</button>\r\n\t\t\t\t\t\t<strong>Oh snap!</strong> Unable to send message. Please contact us at our customer support line at 123-456-7890.\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</ng-container>\r\n\r\n\r\n\t\t\t\t<div class=\"mt-5\">\r\n\t\t\t\t\t<button type=\"submit\" class=\"btn btn-success\">Send Message <i class=\"fas fa-paper-plane\"></i></button>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-eb3f87f27433f2596d9b9240c9cb1c36",
            "file": "src/app/shared/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".footer {\r\n  position: fixed;\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height:50px;\r\n  background-color: red;\r\n  color: white;\r\n  text-align: center;\r\n  margin: 0px;\r\n  padding-bottom: 20px;\r\n  padding: 0px;\r\n\r\n}\r\n@media(max-width: 320px) {\r\n  .footer {\r\n  position: fixed;\r\n  left: 0;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height:50px;\r\n  background-color: red;\r\n  color: white;\r\n  text-align: center;\r\n  margin: 0px;\r\n  padding-bottom: 20px;\r\n  padding: 0px;\r\n  margin-bottom: -2px;\r\n\r\n}\r\np{\r\n  margin-right: 20px;\r\n}\r\n  \r\n}\r\n\r\n",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"footer\">\r\n\t<p>All Rights Reserveed By @Techspian</p>\r\n</div>\r\n\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c349aa42f2121da4b5737d60a50fa413",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-0490c317596475e1b0927d7af6d0d479-1",
            "file": "src/app/shared/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "themeText",
                    "defaultValue": "'DARK'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "'training'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "vm$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<fromHeaderSelectors.HeaderViewModel>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ElementRef, OnInit, Renderer2 } from '@angular/core';\r\nimport * as fromHeaderSelectors from '../../store/selectors/header.selectors';\r\nimport { Observable, from } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../store';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  title = 'training';\r\n  themeText = 'DARK'\r\n\r\n  vm$: Observable<fromHeaderSelectors.HeaderViewModel>;\r\n\r\n  constructor(\r\n    private store: Store<AppState>,\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,) { }\r\n\r\n  ngOnInit(): void {\r\n    this.vm$ = this.store.pipe(\r\n      select(fromHeaderSelectors.selectHeaderViewModel)\r\n    );\r\n  }\r\n\r\n  toggleTheme() {\r\n    // INCOMPLETE NEEDS IMPROVEMENTS\r\n    if (this.themeText == 'DARK') {\r\n      this.themeText = \"LIGHT\";\r\n      this.renderer.setStyle(this.el.nativeElement.ownerDocument.body, 'backgroundColor', 'black');\r\n      // this.renderer.setStyle(this.el.nativeElement.ownerDocument.body, 'color', 'white');\r\n\r\n      // this.renderer.setStyle(this.el.nativeElement, 'color', 'white');\r\n    } else {\r\n      this.themeText = \"DARK\";\r\n      this.renderer.setStyle(this.el.nativeElement.ownerDocument.body, 'backgroundColor', 'white');\r\n\r\n    }\r\n  }\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\r\n  margin: 0;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\n.topnav {\r\n  overflow: hidden;\r\n  background-color:orangered;\r\n  width: 100%;\r\n\r\n\r\n}\r\n\r\n.topnav a {\r\n  float: left;\r\n  display: block;\r\n  color: #f2f2f2;\r\n  text-align: center;\r\n  padding: 14px 16px;\r\n  text-decoration: none;\r\n  font-size: 17px;\r\n}\r\n\r\n.topnav a:hover {\r\n  background-color: #ddd;\r\n  color: black;\r\n}\r\n\r\n.topnav a.active {\r\n  background-color:orangered;\r\n  color: white;\r\n}\r\n\r\n.topnav .icon {\r\n  display: none;\r\n}\r\n.theme{\r\n  cursor: pointer;\r\n}\r\n@media screen and (max-width: 600px) {\r\n  .topnav a:not(:first-child) {display: none;}\r\n  .topnav a.icon {\r\n    float: right;\r\n    display: block;\r\n  }\r\n}\r\n\r\n\r\n@media screen and (max-width: 600px) {\r\n  .topnav.responsive {position: relative;}\r\n  .topnav.responsive .icon {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n  }\r\n  .topnav.responsive a {\r\n    float: none;\r\n    display: block;\r\n    text-align: left;\r\n  }\r\n}\r\n// @media screen and (max-width: 320) {\r\n\r\n// }\r\n\r\n@media(max-width: 320px){\r\n  .container{\r\n    width:50px;\r\n  }\r\n  .topnav {\r\n    overflow: hidden;\r\n    background-color:orangered;\r\n    // width: 50vh;\r\n    display:flex;\r\n    flex-wrap: wrap;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 140px;\r\n    line-height: 10px;\r\n  }\r\n  \r\n  .topnav a {\r\n    float: left;\r\n    color: #f2f2f2;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n    }\r\n  \r\n  .topnav a:hover {\r\n    background-color: #ddd;\r\n    color:green;\r\n  }\r\n  \r\n}\r\n@media(max-width: 500px){\r\n  .topnav {\r\n    overflow: hidden;\r\n    background-color:orangered;\r\n    width: 88vh;\r\n    display:flex;\r\n    flex-wrap: wrap;\r\n    margin: 0;\r\n    padding: 0;\r\n    height: 100px;\r\n    line-height: 10px;\r\n  }\r\n  \r\n  .topnav a {\r\n    float: left;\r\n    color: #f2f2f2;\r\n    text-align: center;\r\n    padding: 14px 16px;\r\n    text-decoration: none;\r\n    font-size: 17px;\r\n    margin-left: 40px;\r\n    }\r\n  \r\n  .topnav a:hover {\r\n    background-color: #ddd;\r\n    color:green;\r\n  }\r\n  \r\n}\r\n\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<!-- <!DOCTYPE html>\r\n<html>\r\n<head>\r\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\r\n</head>\r\n<body> -->\r\n\t<div class=\"container\">\r\n\t<div class=\"topnav\" id=\"myTopnav\">\r\n\t\t<div class=\"active\"><a [routerLink]=\"['home']\">SHOPIFY</a></div>\r\n\r\n\t\t<div>\r\n\t\t\t<a [routerLink]=\"['/shopping/products']\">Go Shopping</a>\r\n\t\t</div>\r\n\r\n\r\n\t\t<div>\r\n\t\t\t<!-- <a id=\"mode\" class=\"active\" (click)=\"toggleTheme()\"\r\n\t\t\t\tstyle=\"font-size: 16px;cursor: pointer;margin-left:50px;\">{{themeText}}</a> -->\r\n\t\t\t\t<a id=\"mode\" [routerLink]=\" \" class=\"theme\" (click)=\"toggleTheme()\">\r\n\t\t\t\t\t{{themeText}}\r\n\t\t\t\t</a>\r\n\t\t</div>\r\n\r\n\t\t<div id=\"navbarColor01\" *ngIf=\"vm$ | async as vm\">\r\n\r\n\r\n\t\t\t<div *ngIf=\"vm.isAdmin\">\r\n\t\t\t\t<a [routerLink]=\"['/shopping/product-list']\">Products</a>\r\n\t\t\t\t<a [routerLink]=\"['/category/list']\">Categories</a>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<app-auth-links></app-auth-links>\r\n\t\t\t</div>\r\n\r\n\r\n\t\t\t<div *ngIf=\"vm.isLoggedin\">\r\n\t\t\t\t<app-cart-link-widget></app-cart-link-widget>\r\n\t\t\t</div>\r\n\r\n\t\t\t\r\n\t\t\t\t<!-- <a href=\"javascript:void(0);\" class=\"icon\" onclick=\"myFunction()\">\r\n\t\t\t\t\t<i class=\"fa fa-bars\"></i>\r\n\t\t\t\t  </a> -->\r\n\t\t\t\t\r\n\t\r\n\t</div>\r\n</div>\r\n<!-- </body>\r\n\r\n<script>\r\n\tfunction myFunction() {\r\n\t  var x = document.getElementById(\"myTopnav\");\r\n\t  if (x.className === \"topnav\") {\r\n\t\tx.className += \" responsive\";\r\n\t  } else {\r\n\t\tx.className = \"topnav\";\r\n\t  }\r\n\t}\r\n\t</script>\r\n\t -->"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-56fc62082e04324f0ca02348d9343623",
            "file": "src/app/pages/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "*{\r\n    margin: 0px;\r\n    padding: 0px;\r\n}\r\n.container{\r\n    background-image: url('../../../assets/backgroundimage.jpg');\r\n    height:85vh;\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: center;\r\n     background-position: center center;\r\n     background-size: cover;\r\n     background-repeat: no-repeat;\r\n     position:relative;\r\n    //  overflow: hidden;\r\n     width: 100%;\r\n    }\r\n\r\n    .text-box{\r\n        width: 90%;\r\n        color: white;\r\n        position: absolute;\r\n        top:50%;\r\n        left:50%;\r\n        transform: translate(-50%, -50%);\r\n        text-align: center;\r\n    }\r\n    .text-box h1{\r\n        font-size: 50px;\r\n    }\r\n    .text-box p{\r\n        margin: 10px 0 40px;\r\n        font-size: 15px;\r\n        color:white;\r\n    }\r\n    \r\n    .hero-btn{\r\n        display: inline-block;\r\n        flex-flow: row;\r\n        text-decoration: none;\r\n        color: white;\r\n        border: 2px solid white;\r\n        padding:12px 34px;\r\n        font-size: 18px;\r\n        background: transparent;\r\n        position: relative;\r\n        cursor: pointer;\r\n    }\r\n    .hero-btn:hover{\r\n        border: 1px solid orangered;\r\n        background: orangered;\r\n        transition: 1s;\r\n    }\r\n    @media(max-width: 500px){\r\n        .container{\r\n          // display: none;\r\n        //   width:60vh;\r\n          background-image: url('../../../assets/backgroundimage.jpg');\r\n          height:72vh;\r\n          // display: flex;\r\n          // align-items: center;\r\n          // justify-content: center;\r\n           background-position: center center;\r\n           background-size: cover;\r\n           background-repeat: no-repeat;\r\n           position:relative;\r\n          //  overflow: hidden;\r\n           width: 100%;\r\n      \r\n        }\r\n        .text-box p h1{\r\n            margin-right: 50px;\r\n        }\r\n    }\r\n    @media (max-width:320px){\r\n        .container{\r\n            background-image: url('../../../assets/backgroundimage.jpg');\r\n            height:127vh;\r\n            // display: flex;\r\n            // align-items: center;\r\n            // justify-content: center;\r\n             background-position: center center;\r\n             background-size: cover;\r\n             background-repeat: no-repeat;\r\n             position:relative;\r\n            //  overflow: hidden;\r\n             width:110%;\r\n  \r\n        }\r\n    }",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\t<!-- <h1><a href=\"\" target=\"blank\">NGRXHome</a></h1> -->\r\n\t<!-- <p class=\"lead\">Implement NGRX into Application</p>\r\n\t<hr>\r\n\t<p>Go look at all the awesome products on the shopping page.</p>\r\n\t<p class=\"lead\">\r\n\t\t<a class=\"btn\" href=\"\" role=\"button\" [routerLink]=\"['/shopping/products']\">\r\n\t\t\t<span>Go Shopping <i class=\"fas fa-shopping-cart\"></i></span>\r\n\t\t</a>\r\n\t</p> -->\r\n\t<!-- <app-header></app-header> -->\r\n\t<div class=\"text-box\">\r\n\t\t<h1>Let's Beautiful. Be Colorful. and Be You</h1>\r\n\t\t<p>Beauty Is Whatever Brings Perfect</p>\r\n\t<a href=\"\" class=\"hero-btn\"  [routerLink]=\"['/shopping/products']\">Go Shopping<i class=\"fas fa-shopping-cart\"></i></a>\r\n\t</div>\r\n\r\n</div>\r\n\r\n<!-- <app-course-list></app-course-list> -->"
        },
        {
            "name": "inputComponent",
            "id": "component-inputComponent-b86839b95b6d25ba8f17552ca08a388c",
            "file": "src/stories/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"btnstory\">\n  <button>Submit</button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector:\"app-input\",\r\n    template: `\r\n      <div class=\"btnstory\">\r\n        <button>Submit</button>\r\n      </div>\r\n    `,\r\n\r\n})\r\n\r\nexport class inputComponent{\r\n\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-2b5dbd6576a993f448315823951dfa27",
            "file": "src/app/modules/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShoppingCart",
                    "args": [
                        {
                            "name": "userid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MockApiCartService } from '../../cart/resources/mock-api-cart.service';\r\nimport { User } from '../resources/auth';\r\nimport * as fromAuthActions from '../../../store/actions/auth.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  constructor(\r\n    private cartService: MockApiCartService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  user: User;\r\n\r\n  ngOnInit(): void { }\r\n\r\n  updateShoppingCart(userid) {\r\n    const observer = {\r\n      next: (cartlist) => {\r\n        this.cartService.updatedCartSelection(cartlist);\r\n      },\r\n      error: (err) => console.error(err),\r\n    };\r\n    this.cartService.getCartByUserId(userid).subscribe(observer);\r\n  }\r\n  onSubmit(f: NgForm) {\r\n    this.store.dispatch(\r\n      fromAuthActions.loginPage({\r\n        username: f.value.username,\r\n        password: f.value.password,\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n.row{\r\n  // background-image: url('../../../../assets/backgroundimage.jpg');\r\n  height: 70vh;\r\n  // display: flex;\r\n  // align-items: center;\r\n  // justify-content: center;\r\n   background-position: center;\r\n   background-size: cover;\r\n   position:relative;\r\n\r\n}\r\n\r\n.container {\r\n  margin: auto;\r\n  width: 400px;\r\n  // max-width: 590px;\r\n  margin-top: 20px;\r\nheight: 80vh;\r\n}\r\n\r\n.container form {\r\n  width: 400px;\r\n  height: 280px;\r\n  padding: 20px;\r\n  margin-top: 20px;\r\n  // background:orangered;\r\n  \r\n  border-radius: 14px;\r\n  box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n}\r\n\r\nlabel {\r\n  color: white;\r\n}\r\n\r\n.container form h1 {\r\n  text-align: center;\r\n  margin-bottom: 24px;\r\n  color: #222;\r\n  color: white;\r\n}\r\n\r\n.container form .inputdetails {\r\n  width: 100%;\r\n  height: 40px;\r\n  background: white;\r\n  border-radius: 14px;\r\n  border: 1px solid silver;\r\n  margin: 10px 0 18px 0;\r\n  padding: 0 10px;\r\n}\r\n\r\n.container form .btn {\r\n  // margin-left: 50%;\r\n  margin-left:70px;\r\n  margin:10px;\r\n  transform: translateX(-50%);\r\n  width: 120px;\r\n  height: 34px;\r\n  border: none;\r\n  outline: none;\r\n  background:orangered;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  border-radius: 4px;\r\n  transition: .3s;\r\n}\r\n\r\n\r\n.container form .btn:hover {\r\n  opacity: .8;\r\n}\r\nh1{\r\n   text-align: center;\r\n   margin-top: 50px;\r\n}\r\n.allbtn{\r\n  display: flex;\r\n  flex-direction:row;\r\n  height:20px;\r\n  width:px;\r\n  margin-left: 160px;\r\n}\r\n@media only screen and (max-width: 700px) {\r\n  .container {\r\n    width: 100%;\r\n  }\r\n  .form {\r\n    width: 40%;\r\n    margin: auto;\r\n  }\r\n}\r\n@media only screen and (max-width: 320px) {\r\n  .container form {\r\n    width: 325px;\r\n    // margin-left: 5px;\r\n  }\r\n\r\n  // .form {\r\n  //   width: 40%;\r\n  //   margin: auto;\r\n  // }\r\n}\r\n\r\n  \r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n\t<div class=\"container\">\r\n\t\t<h1>Login</h1>\r\n\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"usernamelogin\">\r\n\t\t\t\tUsername</label>\r\n\t\t\t\t<input type=\"text\" \r\n\t\t\t\tname=\"username\" \r\n\t\t\t\tngModel \r\n\t\t\t\t#username required id=\"usernamelogin\"\r\n\t\t\t\tclass=\"inputdetails\"\r\n\t\t\t\t placeholder=\"user or admin\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"passwordlogin\">\r\n\t\t\t\tPassword</label>\r\n\t\t\t\t<input type=\"password\" name=\"password\"\r\n\t\t\t\t ngModel #password required \r\n\t\t\t\t id=\"passwordlogin\" \r\n\t\t\t\t class=\"inputdetails\"\r\n\t\t\t\t  placeholder=\"Password\"\r\n\t\t\t\t\t   autocomplete>\r\n\t\t\t</div>\r\n\t\t\t\r\n\t\t\t<div class=\"allbtn\">\r\n\t\t\t\t<button type=\"submit\" [disabled]=f.invalid class=\"btn\"><span>Login <i class=\"fas fa-sign-in-alt\"></i></span></button>\r\n          </div>\r\n\t\t\r\n\t\t</form>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "LoginModalComponent",
            "id": "component-LoginModalComponent-10526e4a0638d52cbe697351d9a62d80",
            "file": "src/app/modules/auth/login-modal/login-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-modal",
            "styleUrls": [
                "./login-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<User>",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateShoppingCart",
                    "args": [
                        {
                            "name": "userid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userid",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { AuthService } from '../resources/auth.service';\r\nimport { User } from '../resources/auth';\r\nimport { Observable } from 'rxjs';\r\nimport { MockApiCartService } from '../../cart/resources/mock-api-cart.service';\r\nimport { ModalService } from '../resources/modal.service';\r\nimport * as fromAuthActions from '../../../store/actions/auth.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\n\r\n@Component({\r\n  selector: 'app-login-modal',\r\n  templateUrl: './login-modal.component.html',\r\n  styleUrls: ['./login-modal.component.scss'],\r\n})\r\nexport class LoginModalComponent implements OnInit {\r\n  user: User;\r\n  user$: Observable<User>;\r\n  constructor(\r\n    public authService: AuthService,\r\n    private cartService: MockApiCartService,\r\n    private modalService: ModalService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  updateShoppingCart(userid) {\r\n    const observer = {\r\n      next: (cartlist) => {\r\n        this.cartService.updatedCartSelection(cartlist);\r\n      },\r\n      error: (err) => console.error(err),\r\n    };\r\n    this.cartService.getCartByUserId(userid).subscribe(observer);\r\n  }\r\n\r\n  onSubmit(f: NgForm) {\r\n    this.store.dispatch(\r\n      fromAuthActions.loginModal({\r\n        username: f.value.username,\r\n        password: f.value.password,\r\n      })\r\n    );\r\n  }\r\n\r\n  cancel(): void {\r\n    this.modalService.hide();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "MockApiCartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "modalService",
                        "type": "ModalService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"text-center\">\r\n\r\n\t<div class=\"row\">\r\n\t\t<div class=\"login-form\">\r\n\t\t\t<h3>Login</h3>\r\n\t\t\t<form #f=\"ngForm\"(ngSubmit)=\"onSubmit(f)\">\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<label for=\"usernamelogin\">Username</label>\r\n\t\t\t\t\t<input type=\"text\" name=\"username\" ngModel #username required id=\"usernamelogin\" class=\"form-control\" placeholder=\"user or admin\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<label for=\"passwordlogin\">Password</label>\r\n\t\t\t\t\t<input type=\"password\" name=\"password\" ngModel #password required id=\"passwordlogin\" class=\"form-control\" placeholder=\"Password\"\r\n\t\t\t\t\t\t   autocomplete>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button type=\"button\" class=\"btn\" (click)=\"cancel()\"><span>Cancel <i\r\n\t\t\t\t\t\t   class=\"fas fa-arrow-left\"></i></span></button>\r\n\t\t\t\t<button type=\"submit\" [disabled]=f.invalid class=\"btn\"><span>Login <i\r\n\t\t\t\t\t\t   class=\"fas fa-sign-in-alt\"></i></span></button>\r\n\r\n\t\t\t</form>\r\n\r\n\t\t</div>\r\n\t</div>\r\n\r\n</div>"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-ebccac8b43320527576df4a6ba0b7560",
            "file": "src/app/pages/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [
                "./not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  templateUrl: './not-found.component.html',\r\n  styleUrls: ['./not-found.component.scss'],\r\n})\r\nexport class NotFoundComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./not-found.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"jumbotron mt-4\">\r\n\t<h1 class=\"display-3\">Oops! Error 404 <span><i class=\"fas fa-search\"></i></span></h1>\r\n\t<p class=\"lead\">Page Not Found</p>\r\n\t<hr class=\"my-2\">\r\n\t<p>We can't seem to find the page you're looking for.</p>\r\n\t<p class=\"lead\">\r\n\t\t<a class=\"btn btn-primary btn-lg\" [routerLink]=\"['/home']\" role=\"button\">Go Home \r\n\t\t<span><i class=\"fas fa-home\"></i></span></a>\r\n\t</p>\r\n</div>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-458a0bd074cddd3932cfcb5b086aeb0d",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PaginationButtonsWidgetComponent",
            "id": "component-PaginationButtonsWidgetComponent-df3c1f6144d51b8aa7b16163b4d31dfc",
            "file": "src/app/shared/pagination-buttons-widget/pagination-buttons-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pagination-buttons-widget",
            "styleUrls": [
                "./pagination-buttons-widget.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pagination-buttons-widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "Pagination"
                }
            ],
            "outputsClass": [
                {
                    "name": "selecedUrl",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "paginationChangeEmit",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Pagination } from '../models/pagination';\r\n\r\n@Component({\r\n  selector: 'app-pagination-buttons-widget',\r\n  templateUrl: './pagination-buttons-widget.component.html',\r\n  styleUrls: ['./pagination-buttons-widget.component.scss'],\r\n})\r\nexport class PaginationButtonsWidgetComponent implements OnInit {\r\n  @Input() pagination: Pagination;\r\n  @Output() selecedUrl: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  paginationChangeEmit(url: string) {\r\n    this.selecedUrl.emit(url);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pagination-buttons-widget.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"btn-group text-center\" role=\"group\" aria-label=\"Pagination\">\r\n\t<button type=\"button\" class=\"btn btn-secondary\" title=\"First\" (click)=\"paginationChangeEmit(pagination.first)\" *ngIf=\"pagination?.first\"><i\r\n\t\t   class=\"fas fa-angle-double-left\"></i> First</button>\r\n\t<button type=\"button\" class=\"btn btn-secondary\" title=\"Previous\" (click)=\"paginationChangeEmit(pagination.prev)\" *ngIf=\"pagination?.prev\"><i\r\n\t\t   class=\"fas fa-chevron-left\"></i>\r\n\t\tPrevious</button>\r\n\t<button type=\"button\" class=\"btn btn-secondary\" title=\"Next\" (click)=\"paginationChangeEmit(pagination.next)\" *ngIf=\"pagination?.next\">Next <i\r\n\t\t   class=\"fas fa-chevron-right\"></i></button>\r\n\t<button type=\"button\" class=\"btn btn-secondary\" title=\"Last\" (click)=\"paginationChangeEmit(pagination.last)\" *ngIf=\"pagination?.last\">Last <i\r\n\t\t   class=\"fas fa-angle-double-right\"></i></button>\r\n</div>"
        },
        {
            "name": "PriceFilterWidgetComponent",
            "id": "component-PriceFilterWidgetComponent-ed2984a9f42970862cc2a8d94382a7c5",
            "file": "src/app/modules/products/price-filter-widget/price-filter-widget.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-price-filter-widget",
            "styleUrls": [
                "./price-filter-widget.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./price-filter-widget.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selectedRadioEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "PriceOptions",
                    "defaultValue": "[\r\n    {\r\n      name: '$100.00 to $250.00',\r\n      value: 'pricerange_1',\r\n      min: '0',\r\n      max: '250',\r\n    },\r\n    {\r\n      name: '$250.00 to $500.00',\r\n      value: 'pricerange_2',\r\n      min: '250',\r\n      max: '500',\r\n    },\r\n    {\r\n      name: '$500.00 to $750.00',\r\n      value: 'pricerange_5',\r\n      min: '500',\r\n      max: '750',\r\n    },\r\n    {\r\n      name: '$750.00 to $999.99',\r\n      value: 'pricerange_4',\r\n      min: '750',\r\n      max: '999',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PriceFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "radioSel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "radioSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "radioSelectedString",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getSelecteditem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onItemChange",
                    "args": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\r\nimport { PriceFilter } from '../resources/product';\r\n\r\n@Component({\r\n  selector: 'app-price-filter-widget',\r\n  templateUrl: './price-filter-widget.component.html',\r\n  styleUrls: ['./price-filter-widget.component.scss'],\r\n})\r\nexport class PriceFilterWidgetComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  radioSel: any;\r\n  radioSelected: string;\r\n  radioSelectedString: string;\r\n\r\n  @Output() selectedRadioEvent = new EventEmitter();\r\n\r\n  PriceOptions: PriceFilter[] = [\r\n    {\r\n      name: '$100.00 to $250.00',\r\n      value: 'pricerange_1',\r\n      min: '0',\r\n      max: '250',\r\n    },\r\n    {\r\n      name: '$250.00 to $500.00',\r\n      value: 'pricerange_2',\r\n      min: '250',\r\n      max: '500',\r\n    },\r\n    {\r\n      name: '$500.00 to $750.00',\r\n      value: 'pricerange_5',\r\n      min: '500',\r\n      max: '750',\r\n    },\r\n    {\r\n      name: '$750.00 to $999.99',\r\n      value: 'pricerange_4',\r\n      min: '750',\r\n      max: '999',\r\n    },\r\n  ];\r\n\r\n  getSelecteditem() {\r\n    this.radioSel = this.PriceOptions.find(\r\n      (Item) => Item.value === this.radioSelected\r\n    );\r\n    this.radioSelectedString = JSON.stringify(this.radioSel);\r\n  }\r\n\r\n  onItemChange(item) {\r\n    this.selectedRadioEvent.emit(item);\r\n    this.getSelecteditem();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.radioSelected = 'pricerange_1';\r\n    this.getSelecteditem();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-group{\r\n    list-style-type: none;\r\n    margin-right: 20px;\r\n}\r\n.list{\r\n    color:orangered;\r\n}\r\n.active{\r\n    color:orangered;\r\n}",
                    "styleUrl": "./price-filter-widget.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\t<div>\r\n\t\t<ul class=\"list-group\">\r\n\t\t\t<li class=\"active\"><strong>Price</strong></li>\r\n\t\t\t<li class=\"list\" *ngFor=\"let item of PriceOptions\">\r\n\t\t\t\t<div class=\"custom-radio\">\r\n\t\t\t\t\t<input class=\"radiobtn\" type=\"radio\" \r\n\t\t\t\t\t[(ngModel)]=\"radioSelected\"\r\n\t\t\t\t\t name=\"list_name\" \r\n\t\t\t\t\t value=\"{{item.value}}\" \r\n\t\t\t\t\t id=\"{{item.value}}\"\r\n\t\t\t\t\t (change)=\"onItemChange(item)\" class=\"\">\r\n\t\t\t\t\t<label for=\"{{item.value}}\" class=\"\">{{item.name}}</label><br>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ProductAddComponent",
            "id": "component-ProductAddComponent-efc5d00e5807c608fe1ba4ff8c7c5b62",
            "file": "src/app/modules/products/product-add/product-add.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-add",
            "styleUrls": [
                "./product-add.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-add.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "f",
                            "type": "NgForm",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { addProduct } from '../state/product.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\n\r\n@Component({\r\n  selector: 'app-product-add',\r\n  templateUrl: './product-add.component.html',\r\n  styleUrls: ['./product-add.component.scss'],\r\n})\r\nexport class ProductAddComponent implements OnInit {\r\n  constructor(private store: Store<AppState>) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  onSubmit(f: NgForm) {\r\n    this.store.dispatch(addProduct({ product: f.value }));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n.row{\r\n  // background-image: url('../../../../assets/backgroundimage.jpg');\r\n  min-height: 80vh;\r\n  // display: flex;\r\n  // align-items: center;\r\n  // justify-content: center;\r\n   background-position: center;\r\n   background-size: cover;\r\n   position:relative;\r\n\r\n}\r\n\r\n.container {\r\n  margin: auto;\r\n  width: 400px;\r\n  max-width: 590px;\r\n  margin-top: 20px;\r\n\r\n}\r\n.form-group{\r\n  margin-top: -10px;\r\n}\r\n.container form {\r\n  width: 400px;\r\n  height: 400px;\r\n  padding: 20px;\r\n  // background:orangered;\r\n  \r\n  border-radius: 14px;\r\n  box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n}\r\n\r\nlabel {\r\n  color: white;\r\n}\r\n\r\nh3 {\r\n  text-align: center;\r\n  margin-bottom: 24px;\r\n  color:orangered;\r\n}\r\n\r\n.container form .inputdetails {\r\n  width: 100%;\r\n  height: 40px;\r\n  background: white;\r\n  border-radius: 14px;\r\n  border: 1px solid silver;\r\n  margin: 10px 0 18px 0;\r\n  padding: 0 10px;\r\n}\r\n\r\n.container form .btn {\r\n  margin-left: 40%;\r\n  // margin-left:90px;\r\n  // margin:10px;\r\n  transform: translateX(-50%);\r\n  width: 220px;\r\n  height: 34px;\r\n  border: none;\r\n  outline: none;\r\n  background:orangered;\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n  text-transform: uppercase;\r\n  color: white;\r\n  border-radius: 4px;\r\n  transition: .3s;\r\n}\r\n// h3{\r\n//  text-align: center;\r\n//  margin-top: -10px;\r\n// }\r\n\r\n//   .container form .btn:hover {\r\n//     opacity: .7;\r\n//   }\r\n\r\n.allbtn{\r\n  // display: flex;\r\n  // flex-direction: row;\r\n  height:20px;\r\n  margin-left: 80px;\r\n  // color:orangered\r\n  // width:px;\r\n}\r\n@media only screen and (max-width: 700px) {\r\n  .container {\r\n    width: 100%;\r\n  }\r\n  .form {\r\n    width: 90%;\r\n    margin: auto;\r\n  }\r\n  .btn{\r\n    display: flex;\r\n   flex-wrap: wrap;\r\n    align-content: center;\r\n\r\n  }\r\n}\r\n@media only screen and (max-width: 320px) {\r\n  .container {\r\n    width: 100%;\r\n  }\r\n  .form {\r\n    width: 90%;\r\n    margin: auto;\r\n  }\r\n  .btn{\r\n    display: flex;\r\n   flex-wrap: wrap;\r\n    align-content: center;\r\n  }\r\n  .container form .inputdetails {\r\n    width: 100%;\r\n    height: 40px;\r\n    background:white;\r\n    border-radius: 14px;\r\n    border: 1px solid silver;\r\n    margin: 10px 0 18px 0;\r\n    padding: 0 10px;\r\n  }\r\n  .container {\r\n    margin: auto;\r\n    width: 400px;\r\n    max-width: 590px;\r\n    margin-top: 20px;\r\n  \r\n  }\r\n  .form-group{\r\n    margin-top: -10px;\r\n  }\r\n  .container form {\r\n    width: 300px;\r\n    height: 400px;\r\n    padding: 20px;\r\n    // background:orangered;\r\n    \r\n    border-radius: 14px;\r\n    box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n  }\r\n  \r\n  h3 {\r\n    text-align: center;\r\n    margin-bottom: 24px;\r\n    color:orangered;\r\n    margin-left: -80px;\r\n  }\r\n  .container form .btn {\r\n    margin-left: 30%;\r\n    // margin-left:90px;\r\n    // margin:10px;\r\n    transform: translateX(-50%);\r\n    width: 150px;\r\n    height: 34px;\r\n    border: none;\r\n    outline: none;\r\n    background:orangered;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    text-transform: uppercase;\r\n    color: white;\r\n    border-radius: 4px;\r\n    transition: .3s;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./product-add.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n\t<div class=\"container\">\r\n\t\t<h3>Add Product</h3>\r\n\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\">\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"productName\">Product Name</label>\r\n\t\t\t\t<input type=\"text\" ngModel required\r\n\t\t\t\t name=\"name\" class=\"inputdetails\" id=\"productName\" placeholder=\"Name\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"productDescription\">Description</label>\r\n\t\t\t\t<textarea class=\"form-control\" \r\n\t\t\t\tngModel name=\"description\" class=\"inputdetails\" id=\"productDescription\"\r\n\t\t\t\t\t\t  placeholder=\"Product Description\"></textarea>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-row\">\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<label for=\"productPrice\">Price</label>\r\n\t\t\t\t\t<input type=\"text\" name=\"price\" \r\n\t\t\t\t\tngModel required class=\"inputdetails\" id=\"productPrice\" placeholder=\"Example: 000.00\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<label for=\"productQuantity\">Quantity</label>\r\n\t\t\t\t\t<input type=\"number\" name=\"quantity\" \r\n\t\t\t\t\trequired ngModel class=\"inputdetails\" id=\"productQuantity\" placeholder=\"Example: 100\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"productImageUrl\">Image Url</label>\r\n\t\t\t\t<input type=\"text\" name=\"imageUrl\" ngModel required class=\"inputdetails\" id=\"productImageUrl\"\r\n\t\t\t\tplaceholder=\"Example: https://source.unsplash.com/1600x900/?product\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"allbtn\">\r\n\t\t\t\t<!-- <button class=\"btn\" [routerLink]=\"['/admin/product-list']\"><i class=\"fas fa-arrow-left\"></i> Back To List</button> -->\r\n\t\t\t\t<button class=\"btn\" type=\"submit\" [disabled]=\"f.invalid\">Add Product <i class=\"fas fa-plus\"></i></button>\r\n\t\t\t\t</div>\r\n\t\r\n\t\t</form>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ProductEditComponent",
            "id": "component-ProductEditComponent-f3f11c71ffabdb602fc8a18743623cdf",
            "file": "src/app/modules/products/product-edit/product-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-edit",
            "styleUrls": [
                "./product-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "model",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MockProductApiService } from '../resources/mock-product-api.service';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\nimport * as fromProductActions from '../state/product.actions';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\n\r\n@Component({\r\n  selector: 'app-product-edit',\r\n  templateUrl: './product-edit.component.html',\r\n  styleUrls: ['./product-edit.component.scss'],\r\n})\r\nexport class ProductEditComponent implements OnInit {\r\n  constructor(\r\n    private service: MockProductApiService,\r\n    private route: ActivatedRoute,\r\n    private spinner: NgxSpinnerService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  model: any = {};\r\n\r\n  ngOnInit() {\r\n    this.spinner.show();\r\n    this.service\r\n      .getProduct(this.route.snapshot.paramMap.get('id'))\r\n      .subscribe((product) => (this.model = product));\r\n    // Remove setTimeout in production\r\n    setTimeout(() => {\r\n      this.spinner.hide();\r\n    }, 1000);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.store.dispatch(\r\n      fromProductActions.upsertProduct({ product: this.model })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n  .row{\r\n    // background-image: url('../../../../assets/backgroundimage.jpg');\r\n    min-height: 80vh;\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: center;\r\n     background-position: center;\r\n     background-size: cover;\r\n     position:relative;\r\n\r\n  }\r\n \r\n  .container {\r\n    margin: auto;\r\n    width: 400px;\r\n    max-width: 590px;\r\n    margin-top: 20px;\r\n\r\n  }\r\n \r\n  .container form {\r\n    width: 400px;\r\n    height: 450px;\r\n    padding: 20px;\r\n    // background:orangered;\r\n    \r\n    border-radius: 14px;\r\n    box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n  }\r\n \r\n  label {\r\n    color: white;\r\n  }\r\n \r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 24px;\r\n    color: #222;\r\n    color: white;\r\n  }\r\n \r\n  .container form .inputdetails {\r\n    width: 100%;\r\n    height: 40px;\r\n    background: white;\r\n    border-radius: 14px;\r\n    border: 1px solid silver;\r\n    margin: 10px 0 18px 0;\r\n    padding: 0 10px;\r\n  }\r\n \r\n  .container form .btn {\r\n    // margin-left: 50%;\r\n    // margin-left:90px;\r\n    margin:10px;\r\n    transform: translateX(-50%);\r\n    width: 120px;\r\n    height: 34px;\r\n    border: none;\r\n    outline: none;\r\n    background:orangered;\r\n    cursor: pointer;\r\n    font-size: 16px;\r\n    text-transform: uppercase;\r\n    color: white;\r\n    border-radius: 4px;\r\n    transition: .3s;\r\n  }\r\n h3{\r\n   text-align: center;\r\n   margin-top: -10px;\r\n   color:orangered;\r\n }\r\n \r\n//   .container form .btn:hover {\r\n//     opacity: .7;\r\n//   }\r\n \r\n.allbtn{\r\n    // display: flex;\r\n    // flex-direction: row;\r\n    height:20px;\r\n    margin-left: 80px;\r\n    // color:orangered\r\n    // width:px;\r\n}\r\n@media only screen and (max-width: 500px) {\r\n  .row{\r\n    // background-image: url('../../../../assets/backgroundimage.jpg');\r\n    min-height: 80vh;\r\n    // display: flex;\r\n    // align-items: center;\r\n    // justify-content: center;\r\n     background-position: center;\r\n     background-size: cover;\r\n     position:relative;\r\n\r\n  }\r\n \r\n  .container {\r\n    margin: auto;\r\n    width: 400px;\r\n    max-width: 590px;\r\n    margin-top: 20px;\r\n    margin-bottom: 40px;\r\n    }\r\n \r\n  .container form {\r\n    width: 450px;\r\n    height: 350px;\r\n    padding: 20px;\r\n    // background:orangered;\r\n    margin-left: 20px;\r\n    border-radius: 14px;\r\n    box-shadow: 0px 8px 16px rgba(0, 0, 0, .3);\r\n    line-height: 1px;\r\n  }\r\n \r\n  label {\r\n    color: white;\r\n  }\r\n \r\n  h2 {\r\n    text-align: center;\r\n    margin-bottom: 24px;\r\n    color: #222;\r\n    color: white;\r\n  }\r\n \r\n  .container form .inputdetails {\r\n    width: 100%;\r\n    height: 40px;\r\n    background: white;\r\n    border-radius: 14px;\r\n    border: 1px solid silver;\r\n    margin: 10px 0 18px 0;\r\n    padding: 0 10px;\r\n  }\r\n \r\n  .container form .btn {\r\n    // margin-left: 50%;\r\n    // margin-left:90px;\r\n    margin:10px;\r\n    transform: translateX(-50%);\r\n    width: 80px;\r\n    height: 34px;\r\n    border: none;\r\n    outline: none;\r\n    background:orangered;\r\n    cursor: pointer;\r\n    font-size: 10px;\r\n    text-transform: uppercase;\r\n    color: white;\r\n    border-radius: 4px;\r\n    transition: .3s;\r\n  }\r\n h3{\r\n   text-align: center;\r\n   margin-top: -10px;\r\n   color:orangered;\r\n }\r\n \r\n//   .container form .btn:hover {\r\n//     opacity: .7;\r\n//   }\r\n \r\n.allbtn{\r\n    // display: flex;\r\n    // flex-direction: row;\r\n    height:20px;\r\n    margin-left: 80px;\r\n    margin-bottom: 40px;\r\n    // color:orangered\r\n    // width:px;\r\n} \r\n}\r\n @media only screen and (max-width: 700px) {\r\n    .container {\r\n      width: 100%;\r\n    }\r\n    .form {\r\n      width: 90%;\r\n      margin: auto;\r\n    }\r\n    .btn{\r\n      display: flex;\r\n     flex-wrap: wrap;\r\n      align-content: center;\r\n\r\n    }\r\n  }",
                    "styleUrl": "./product-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "MockProductApiService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "MockProductApiService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\r\n\t<div class=\"container\">\r\n\t\t<h3>Edit Product</h3>\r\n\t\t<form #f=\"ngForm\" (ngSubmit)=\"onSubmit()\">\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"productName\">Product Name</label>\r\n\t\t\t\t<input type=\"text\"\r\n\t\t\t\tclass=\"inputdetails\"\t\t\t\t\r\n\t\t\t\t name=\"name\" required \r\n\t\t\t\t [(ngModel)]=\"model.name\" \r\n\t\t\t\t id=\"productName\" \r\n\t\t\t\t placeholder=\"Name\">\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"productDescription\">Description</label>\r\n\t\t\t\t<textarea class=\"inputdetails\" id=\"productDescription\" name=\"description\" required [(ngModel)]=\"model.description\"\r\n\t\t\t\t\t\t  placeholder=\"Product Description\"></textarea>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"form-row\">\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<label for=\"productPrice\">Price</label>\r\n\t\t\t\t\t<input type=\"text\" class=\"inputdetails\" name=\"price\" required [(ngModel)]=\"model.price\" id=\"productPrice\"\r\n\t\t\t\t\t\t   placeholder=\"Example: 000.00\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t\t<label for=\"productQuantity\">Quantity</label>\r\n\t\t\t\t\t<input type=\"number\" class=\"inputdetails\" name=\"quantity\" required [(ngModel)]=\"model.quantity\" id=\"productQuantity\"\r\n\t\t\t\t\t\t   placeholder=\"Example: 100\">\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t\t<div class=\"form-group\">\r\n\t\t\t\t<label for=\"productImageUrl\">Image Url</label>\r\n\t\t\t\t<input type=\"text\" class=\"inputdetails\" id=\"productImageUrl\" required name=\"imageUrl\" [(ngModel)]=\"model.imageUrl\"\r\n\t\t\t\t\t   placeholder=\"Example: https://source.unsplash.com/1600x900/?product\">\r\n\t\t\t<div class=\"allbtn\">\t\t\t\r\n\r\n\t\t\t<button class=\"btn\" [routerLink]=\"['/shopping/product-list']\" type=\"submit\"><i class=\"fas fa-arrow-left\"></i> Back To\r\n\t\t\t\tList</button>\r\n\t\t\t<button class=\"btn\" type=\"submit\" [disabled]=\"f.invalid\">Edit Product <i class=\"fas fa-edit\"></i></button>\r\n\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\t\t</form>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ProductItemComponent",
            "id": "component-ProductItemComponent-fd8da2a0a8e0ad7966bda0dc63d887c9",
            "file": "src/app/modules/products/product-item/product-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-item",
            "styleUrls": [
                "./product-item.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isProductInStore$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "product$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Product } from '../resources/product';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport * as fromProductSelectors from '../state/product.selectors';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\nimport * as fromProductActions from '../state/product.actions';\r\n\r\n@Component({\r\n  selector: 'app-product-item',\r\n  templateUrl: './product-item.component.html',\r\n  styleUrls: ['./product-item.component.scss'],\r\n})\r\nexport class ProductItemComponent implements OnInit {\r\n  product$: Observable<Product>;\r\n  isProductInStore$: Observable<boolean>;\r\n  productId: string;\r\n\r\n  constructor(private route: ActivatedRoute, private store: Store<AppState>) { }\r\n\r\n  ngOnInit() {\r\n    this.productId = this.route.snapshot.paramMap.get('id');\r\n\r\n    this.isProductInStore$ = this.store.pipe(\r\n      select(fromProductSelectors.entityExists, { id: this.productId })\r\n    );\r\n\r\n    this.product$ = this.isProductInStore$.pipe(\r\n      mergeMap((isProductInStore) => {\r\n        if (!isProductInStore) {\r\n          this.store.dispatch(\r\n            fromProductActions.loadAdminProduct({ id: this.productId })\r\n          );\r\n        }\r\n\r\n        return this.store.pipe(\r\n          select(fromProductSelectors.selectEntityById, {\r\n            id: this.productId,\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  deleteProduct(id: string) {\r\n    this.store.dispatch(\r\n      fromProductActions.deleteItemProduct({ productId: id })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\nh1{\r\n    margin-left: 500px;\r\n    color:orangered;\r\n}\r\n.addbtn{\r\n    margin-left: 570px;\r\n    text-decoration: none;\r\n    color: white;\r\n    border: 2px solid white;\r\n    padding:12px 14px;\r\n    font-size: 14px;\r\n    background: transparent;\r\n    position: relative;\r\n    cursor: pointer;\r\n}\r\n.addbtn:hover{\r\n    border: 1px solid orangered;\r\n    background: orangered;\r\n    transition: 1s;\r\n}\r\n.row-card{\r\n\r\n//     display: flex;\r\n// flex-direction: row;\r\n    margin-left:120px;\r\n    height:80vh;\r\n}\r\n\r\n.card{\r\n    // flex-basis: 31%;\r\n    background:#fff3f3;\r\n    border-radius: 10px;\r\n    margin-bottom: 15%;\r\n    padding:20px 12px;\r\n    box-sizing: border-box;\r\n    color: orangered;\r\n    text-align: center;\r\n    height: 340px;\r\n    width: 310px; \r\n    margin-left: 450px;\r\n    margin-top: 50px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-content: flex-start;\r\n        \r\n}\r\n// .card-list{\r\n//    display: flex;\r\n//    flex-direction: row;\r\n//  }\r\n.card-img-top{\r\n    width: 240px;\r\n    height: 150px;\r\n    margin-left: 20px;\r\n}\r\n.card-title{\r\n    font-size: 22px;\r\n    margin: 0;\r\n}\r\n.card-text{\r\n    font-size: 16px;\r\n}\r\n   .card-body{\r\n    line-height: 1;\r\n\r\n   } \r\n   .backlistbtn{\r\n       margin-left: 50px;\r\n   }\r\n.btn{\r\n    border: none;\r\n    color: white;\r\n    background-color: orangered;\r\n    padding: 6px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 2px;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n  \r\n}\r\n\r\n// // .addbtn{\r\n// //     background-color: orangered;\r\n// //     margin-left: 540px;\r\n// //     font-size: 18px;\r\n// //     height:50px;\r\n// //     border-radius: 2px solid white;\r\n// // }\r\n\r\n@media(max-width: 500px) {\r\n    h1{\r\n        margin-left: -10px;\r\n        color:orangered;\r\n    }\r\n    .card{\r\n        // flex-basis: 31%;\r\n        background:#fff3f3;\r\n        border-radius: 10px;\r\n        margin-bottom: 15%;\r\n        padding:20px 12px;\r\n        box-sizing: border-box;\r\n        color: orangered;\r\n        text-align: center;\r\n        height: 300px;\r\n        width: 310px; \r\n        margin-left: -120px;\r\n        margin-top: 30px;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-content: flex-start;\r\n            \r\n    }\r\n    // .card-list{\r\n    //    display: flex;\r\n    //    flex-direction: row;\r\n    //  }\r\n    .card-img-top{\r\n        width: 240px;\r\n        height: 150px;\r\n        margin-left: 20px;\r\n    }\r\n    .card-title{\r\n        font-size: 22px;\r\n        margin: 0;\r\n    }\r\n    .card-text{\r\n        font-size: 16px;\r\n    }\r\n       .card-body{\r\n        line-height: 1;\r\n    \r\n       } \r\n       .backlistbtn{\r\n           margin-left: 50px;\r\n       }\r\n    .btn{\r\n        border: none;\r\n        color: white;\r\n        background-color: orangered;\r\n        padding: 6px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px;\r\n        margin: 4px 2px;\r\n        cursor: pointer;\r\n        border-radius: 10px;\r\n      \r\n    }\r\n    \r\n}\r\n@media(max-width: 320px) {\r\n    h1{\r\n        margin-left: -10px;\r\n        color:orangered;\r\n    }\r\n    .card{\r\n        // flex-basis: 31%;\r\n        background:#fff3f3;\r\n        border-radius: 10px;\r\n        margin-bottom: 15%;\r\n        padding:20px 12px;\r\n        box-sizing: border-box;\r\n        color: orangered;\r\n        text-align: center;\r\n        height: 300px;\r\n        width: 310px; \r\n        margin-left: -120px;\r\n        margin-top: 30px;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-content: flex-start;\r\n            \r\n    }\r\n    // .card-list{\r\n    //    display: flex;\r\n    //    flex-direction: row;\r\n    //  }\r\n    .card-img-top{\r\n        width: 240px;\r\n        height: 150px;\r\n        margin-left: 20px;\r\n    }\r\n    .card-title{\r\n        font-size: 22px;\r\n        margin: 0;\r\n    }\r\n    .card-text{\r\n        font-size: 16px;\r\n    }\r\n       .card-body{\r\n        line-height: 1;\r\n    \r\n       } \r\n       .backlistbtn{\r\n           margin-left: 50px;\r\n       }\r\n    .btn{\r\n        border: none;\r\n        color: white;\r\n        background-color: orangered;\r\n        padding: 6px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px;\r\n        margin: 4px 2px;\r\n        cursor: pointer;\r\n        border-radius: 10px;\r\n      \r\n    }\r\n    \r\n}\r\n@media(max-width: 500px) {\r\n    h1{\r\n        margin-left: 50px;\r\n        color:orangered;\r\n    }\r\n    .card{\r\n        // flex-basis: 31%;\r\n        background:#fff3f3;\r\n        border-radius: 10px;\r\n        margin-bottom: 15%;\r\n        padding:20px 12px;\r\n        box-sizing: border-box;\r\n        color: orangered;\r\n        text-align: center;\r\n        height: 300px;\r\n        width: 310px; \r\n        margin-left: -10px;\r\n        margin-top: 30px;\r\n        display: flex;\r\n        flex-wrap: wrap;\r\n        align-content: flex-start;\r\n            \r\n    }\r\n    // .card-list{\r\n    //    display: flex;\r\n    //    flex-direction: row;\r\n    //  }\r\n    .card-img-top{\r\n        width: 240px;\r\n        height: 150px;\r\n        margin-left: 20px;\r\n    }\r\n    .card-title{\r\n        font-size: 22px;\r\n        margin: 0;\r\n    }\r\n    .card-text{\r\n        font-size: 16px;\r\n    }\r\n       .card-body{\r\n        line-height: 1;\r\n    \r\n       } \r\n       .backlistbtn{\r\n           margin-left: 50px;\r\n       }\r\n    .btn{\r\n        border: none;\r\n        color: white;\r\n        background-color: orangered;\r\n        padding: 6px;\r\n        text-align: center;\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        font-size: 16px;\r\n        margin: 4px 2px;\r\n        cursor: pointer;\r\n        border-radius: 10px;\r\n      \r\n    }\r\n    \r\n}\r\n\r\n\r\n",
                    "styleUrl": "./product-item.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\t<div class=\"row-card\">\r\n\t<div>\t\t\t\r\n\t\t<h1>Product Detail</h1>\r\n\t</div>\r\n\r\n\t\t\t<div class=\"card\" *ngIf=\"product$ | async as product\">\r\n\r\n\t\t\t\t<div class=\"card-list\">\r\n\r\n\t\t\t\t\t<img class=\"card-img-top\" src=\"{{product.imageUrl}}\" alt=\"Card image cap\">\r\n\t\t\t\t\t<div class=\"card-body\">\r\n\t\t\t\t\t\t<h5 class=\"card-title\">{{product.name}}</h5>\r\n\t\t\t\t\t\t<p class=\"card-text\">Price: ${{product.price}}</p>\r\n\t\t\t\t\t\t<p class=\"card-text\">\r\n\t\t\t\t\t\t\tIn Stock: {{product.quantity}}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<!-- <div>\r\n\t\t\t\t\t\t<p class=\"card-text\">Price: ${{product.price}}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<p class=\"card-text\">\r\n\t\t\t\t\t\t\tIn Stock: {{product.quantity}}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<div class=\"card-body\">\r\n\t\t\t\t\t<h5 class=\"card-title\">{{product.name}}</h5>\r\n\t\t\t\t\t<p class=\"card-text\">{{product.description}}\r\n\t\t\t\t\t</p>\r\n\t\t\t\t</div> -->\r\n\t\t\t\t\t<div class=\"all-btn\">\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn\"\r\n\t\t\t\t\t\t\t\t\t[routerLink]=\"['/shopping/product-edit', product.id]\">Edit <i\r\n\t\t\t\t\t\t\t\t\t\tclass=\"fas fa-edit\"></i></button>\r\n\t\t\t\t\t\t\t\t<button type=\"button\" (click)=\"deleteProduct(product.id)\" class=\"btn\">Remove\r\n\t\t\t\t\t\t\t\t\t<i class=\"fas fa-trash\"></i></button>\r\n\t\t\t\t\t\t\t\t\t<button class=\"btn\" [routerLink]=\"['/shopping/product-list']\"\r\n\t\t\t\t\t\t\t\t\trouterLinkActive=\"router-link-active\"><i class=\"fas fa-arrow-left\"></i>\r\n\t\t\t\t\t\t\t\t\tBack To List</button>\r\n\t\t\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\r\n\t\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\r\n\r\n\t</div>"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-4e010a09a4a97c32282d90b4b4a90df2",
            "file": "src/app/modules/products/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [
                "./product-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "vm$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProductSelector.ProductsViewModel>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProducts",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPaginationChange",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { PaginationService } from '../../../shared/services/pagination.service';\r\nimport { environment } from 'src/environments/environment';\r\nimport * as fromProductActions from '../state/product.actions';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\nimport * as ProductSelector from '../state/product.selectors';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-product-list',\r\n  templateUrl: './product-list.component.html',\r\n  styleUrls: ['./product-list.component.scss'],\r\n})\r\nexport class ProductListComponent implements OnInit {\r\n  constructor(\r\n    private paginationService: PaginationService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  currentUrl: string;\r\n  vm$: Observable<ProductSelector.ProductsViewModel>;\r\n\r\n  ngOnInit(): void {\r\n    this.vm$ = this.store.pipe(select(ProductSelector.selectProductsViewModel));\r\n    this.loadProducts(\r\n      this.paginationService.createUrl(\r\n        '0',\r\n        '999',\r\n        '1',\r\n        '25',\r\n        environment.baseUrl + 'products?'\r\n      )\r\n    );\r\n  }\r\n\r\n  loadProducts(url: string) {\r\n    this.store.dispatch(\r\n      fromProductActions.loadAdminProducts({\r\n        url:url,\r\n      })\r\n    );\r\n    this.currentUrl = url;\r\n  }\r\n\r\n  deleteProduct(id: string) {\r\n    this.store.dispatch(fromProductActions.deleteProduct({ productId: id }));\r\n  }\r\n\r\n  onPaginationChange(url: string) {\r\n    this.loadProducts(url);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".product-list{\r\n  height: 500px;\r\n}\r\ntable {\r\n    font-family: arial, sans-serif;\r\n    border-collapse: collapse;\r\n    width: 60%;\r\n    margin-left: 300px;\r\n  }\r\n  \r\n  td, th {\r\n    border: 2px solid black;\r\nborder:none;\r\n    text-align: center;\r\n    padding: 8px;\r\n    color:orangered;\r\n  }\r\n  \r\n  tr:nth-child(even) {\r\n    background-color:#fff3f3;\r\n  }\r\n  h3{\r\n      text-align: center;\r\n      color:orangered;\r\n  }\r\n.addbtn{\r\n  border: none;\r\n    background-color:orangered;\r\n    color: white;\r\n    padding: 10px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 10px;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n  \r\n}\r\n  .btn{\r\n    border: none;\r\n    background-color:white;\r\n    color: black;\r\n    padding: 10px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 10px;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n  \r\n  }\r\n  @media only screen and (max-width:320) {\r\n    h3{\r\n          // margin-left:50px;\r\n          margin-top:25px;\r\n          /* margin-top:200px;    */\r\n       }\r\n     .table{\r\n      width: 100% !important;\r\n      margin-left: 0;\r\n  \r\n      /* border-collapse: collapse; */\r\n      /* margin-left: 240px; */\r\n    }\r\n    .btn-group{\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      \r\n    }\r\n  \r\n    // .btn-cta {\r\n    //   display: flex;\r\n    //   justify-content: space-between;\r\n    // }\r\n    \r\n  \r\n  }\r\n  \r\n  \r\n  @media(max-width: 500px){\r\n    .table thead{\r\n      // display: none;\r\n    }\r\n    table {\r\n      font-family: arial, sans-serif;\r\n      border-collapse: collapse;\r\n      width: 60%;\r\n      margin-left: 50px;\r\n      height: 100vh;\r\n    }\r\n\r\n    \r\n    .table, .table tbody, .table tr, .table td{\r\n      display: inline-table;\r\n      width: 95%; \r\n    }\r\n    .table tr{\r\n      margin-bottom:15px;\r\n    }\r\n    .table td{\r\n      text-align: right;\r\n      padding-left: 50%;\r\n      text-align: right;\r\n      position: relative;\r\n    }\r\n    .table td::before{\r\n      content: attr(data-label);\r\n      position: absolute;\r\n      left:0;\r\n      width: 50%;\r\n      padding-left:15px;\r\n      font-size:15px;\r\n      font-weight: bold;\r\n      text-align: left;\r\n    }\r\n  }\r\n  @media only screen and (max-width: 700px) {\r\n    h3{\r\n          // margin-left:50px;\r\n          margin-top:25px;\r\n          /* margin-top:200px;    */\r\n       }\r\n     .table{\r\n      width: 100% !important;\r\n      margin-left: 0;\r\n  \r\n      /* border-collapse: collapse; */\r\n      /* margin-left: 240px; */\r\n    }\r\n  \r\n    // .btn-cta {\r\n    //   display: flex;\r\n    //   justify-content: space-between;\r\n    // }\r\n    \r\n  \r\n  }\r\n  \r\n  \r\n  \r\n  ",
                    "styleUrl": "./product-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paginationService",
                        "type": "PaginationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "paginationService",
                        "type": "PaginationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"product-list\" *ngIf=\"vm$|async as vm\">\r\n\t<h3>Product List</h3>\r\n\r\n\t<table class=\"table\">\r\n\r\n\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t\t<th scope=\"col\">Product Name</th>\r\n\t\t\t\t<th scope=\"col\">Price</th>\r\n\t\t\t\t<th scope=\"col\">quantity</th>\r\n\t\t\t\t<th scope=\"col\">\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\t<button type=\"button\" title=\"Add new product\" class=\"addbtn\" [routerLink]=\"['/shopping/product-add']\">Add New Product\r\n\t\t\t\t\t\t\t<i class=\"fas fa-plus\"></i></button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</th>\r\n\t\t\t</tr>\r\n\t\t</thead>\r\n\t\t<tbody>\r\n\r\n\t\t\t<tr *ngFor=\"let product of vm.products\">\r\n\t\t\t\t<th scope=\"row\">{{product.name}}</th>\r\n\t\t\t\t<td>${{product.price}}</td>\r\n\t\t\t\t<td>{{product.quantity}}</td>\r\n\t\t\t\t<td>\r\n\t\t\t\t\t<div class=\"btn-group\" role=\"group\">\r\n\t\t\t\t\t\t<button type=\"button\" class=\"btn\" title=\"View Product\"><i class=\"fas fa-search\"\r\n\t\t\t\t\t\t\t   [routerLink]=\"['/shopping/product-item', product.id]\"></i></button>\r\n\t\t\t\t\t\t<button type=\"button\" class=\"btn\" title=\"Edit Product\" [routerLink]=\"['/shopping/product-edit', product.id]\"><i\r\n\t\t\t\t\t\t\t   class=\"fas fa-edit\"></i></button>\r\n\t\t\t\t\t\t<button type=\"button\" class=\"btn\" title=\"Delete Product\" (click)=\"deleteProduct(product.id)\"><i class=\"fa fa-trash\"\r\n\t\t\t\t\t\t\t   aria-hidden=\"true\"></i></button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\r\n\t\t</tbody>\r\n\t</table>\r\n\t<div class=\"row\">\r\n\t\t<div class=\"\">\r\n\t\t\t<app-pagination-buttons-widget [pagination]=\"vm.pagination\" (selecedUrl)=\"onPaginationChange($event);\">\r\n\t\t\t</app-pagination-buttons-widget>\r\n\t\t</div>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ProductsComponent",
            "id": "component-ProductsComponent-5568657484a566bf13088a88f35b0c42",
            "file": "src/app/modules/products/products.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products",
            "styleUrls": [
                "./products.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "vm$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProductSelector.ProductsViewModel>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "loadProducts",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPaginationChange",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPriceFilterChange",
                    "args": [
                        {
                            "name": "item",
                            "type": "fromProductModels.PriceFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "fromProductModels.PriceFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport * as fromProductModels from '../products/resources/product';\r\nimport { environment } from 'src/environments/environment';\r\nimport { PaginationService } from '../../shared/services/pagination.service';\r\nimport * as fromProductActions from './state/product.actions';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../store';\r\nimport * as ProductSelector from './state/product.selectors';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-products',\r\n  templateUrl: './products.component.html',\r\n  styleUrls: ['./products.component.scss'],\r\n})\r\nexport class ProductsComponent implements OnInit {\r\n  vm$: Observable<ProductSelector.ProductsViewModel>;\r\n\r\n  constructor(\r\n    private paginationService: PaginationService,\r\n    private store: Store<AppState>\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.vm$ = this.store.pipe(select(ProductSelector.selectProductsViewModel));\r\n    this.loadProducts(\r\n      this.paginationService.createUrl(\r\n        '0',\r\n        '999',\r\n        '1',\r\n        '9',\r\n        environment.baseUrl + 'products?'\r\n      )\r\n    );\r\n  }\r\n\r\n  loadProducts(url: string) {\r\n    this.store.dispatch(\r\n      fromProductActions.loadProducts({\r\n        url: url,\r\n      })\r\n    );\r\n  }\r\n\r\n  onPriceFilterChange(item: fromProductModels.PriceFilter) {\r\n    this.loadProducts(\r\n      this.paginationService.createUrl(\r\n        item.min,\r\n        item.max,\r\n        '1',\r\n        '25',\r\n        environment.baseUrl + 'products?'\r\n      )\r\n    );\r\n  }\r\n\r\n  onPaginationChange(url: string) {\r\n    this.loadProducts(url);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container{\r\n    // height: 100vh;\r\n    overflow:hidden;\r\n}\r\n.row-card{\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-content: stretch;\r\n    overflow: hidden;\r\n     \r\n}\r\n.btn{\r\n    background-color: black;\r\n    // color:orange;\r\n    border: none;\r\n    color: white;\r\n    padding: 5px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 20px;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n  }\r\n.addbtn{\r\n    margin-left: 570px;\r\n    text-decoration: none;\r\n    color: white;\r\n    border: 2px solid white;\r\n    padding:12px 14px;\r\n    font-size: 14px;\r\n    background: transparent;\r\n    position: relative;\r\n    cursor: pointer;\r\n}\r\n.addbtn:hover{\r\n    border: 1px solid orangered;\r\n    background: orangered;\r\n    transition: 1s;\r\n}\r\n.card{\r\n    // flex-basis: 31%;\r\n    background:#fff3f3;\r\n    border-radius: 10px;\r\n    margin-bottom: 5%;\r\n    padding:20px 12px;\r\n    box-sizing: border-box;\r\n    color: orangered;\r\n    text-align: center;\r\n    height: 310px;\r\n    width: 264px; \r\n    margin-left: 50px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n}\r\n// .card-list{\r\n//    display: flex;\r\n//    flex-direction: row;\r\n//  }\r\n.card-img-top{\r\n    width: 240px;\r\n    height: 150px;\r\n}\r\n.card-title{\r\n    font-size: 22px;\r\n    margin: 0;\r\n}\r\n.card-text{\r\n    font-size: 16px;\r\n}\r\n   .card-body{\r\n    line-height: 1;\r\n\r\n   } \r\nh1{\r\n    text-align: center;\r\n    color:orangered;\r\n}\r\n.filter{\r\n    text-align: center;\r\n    list-style-type: none;\r\n}\r\np{\r\n    color:orangered;\r\n    text-align: center;\r\n    // margin-left: 40px;\r\n}\r\n// // .addbtn{\r\n// //     background-color: orangered;\r\n// //     margin-left: 540px;\r\n// //     font-size: 18px;\r\n// //     height:50px;\r\n// //     border-radius: 2px solid white;\r\n// // }\r\n@media(max-width: 320px) {\r\n    .row-card{\r\n        display: flex;\r\n    flex-direction: row;\r\n    }\r\n    .card{\r\n        // flex-basis: 31%;\r\n        background:#fff3f3;\r\n        border-radius: 10px;\r\n        margin-bottom: 5%;\r\n        padding:20px 12px;\r\n        box-sizing: border-box;\r\n        color: orangered;\r\n        text-align: center;\r\n        height: 310px;\r\n        width: 264px; \r\n        margin-left: 21px;\r\n        display: flex;\r\n        flex-direction: row;\r\n        \r\n    }    \r\n}",
                    "styleUrl": "./products.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "paginationService",
                        "type": "PaginationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "paginationService",
                        "type": "PaginationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n\t<div class=\"container\" *ngIf=\"vm$ |async as vm\">\r\n\r\n\t\t<div class=\"filter\">\r\n\t\t\t<p>Filter Products by:</p>\r\n\t\t\t<app-price-filter-widget (selectedRadioEvent)=\"onPriceFilterChange($event)\"></app-price-filter-widget>\r\n\t\t</div>\r\n\r\n\t\t<h1>Products</h1>\r\n\r\n\t\t<div class=\"row-card\">\r\n\t\t\t<div class=\"card\" *ngFor=\"let product of vm.products\">\r\n\t\t\t\t<div class=\"card-list\">\r\n\t\t\t\t\t<img src=\"{{product.imageUrl}}\" class=\"card-img-top\" alt=\"Product Image\">\r\n\t\t\t\t\t<div class=\"card-body\">\r\n\t\t\t\t\t\t<h6 class=\"card-title\">{{product.name}}</h6>\r\n\t\t\t\t\t\t<p class=\"card-text\">Price : ${{product.price}}</p>\r\n\t\t\t\t\t\t<p class=\"card-text\">Quantity : {{product.quantity}}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"all-btn\">\r\n\t\t\t\t\t\t<div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n\t\t\t\t\t\t\t<button type=\"button\" class=\"btn\"\r\n\t\t\t\t\t\t\t\t[routerLink]=\"['/shopping/product-view', product.id]\" title=\"View Product Details\"><i\r\n\t\t\t\t\t\t\t\t\tclass=\"fas fa-search\"></i> View</button>\r\n\t\t\t\t\t\t\t<app-cart-button-widget [product]=\"product\" [text]=\"'Cart'\"></app-cart-button-widget>\r\n\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t<div class=\"pagination\">\r\n\t\t\t<div class=\"page\">\r\n\t\t\t\t<app-pagination-buttons-widget [pagination]=\"vm.pagination\" (selecedUrl)=\"onPaginationChange($event);\">\r\n\t\t\t\t</app-pagination-buttons-widget>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ProductViewComponent",
            "id": "component-ProductViewComponent-b2b4c74d8ae7d099d832faf6f77d8b4e",
            "file": "src/app/modules/products/product-view/product-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-view",
            "styleUrls": [
                "./product-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isProductInStore$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "product$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Product>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Optional } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Product } from '../resources/product';\r\nimport * as fromProductSelectors from '../state/product.selectors';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { AppState } from '../../../store';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport * as fromProductActions from '../state/product.actions';\r\nimport { FormBuilder } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-product-view',\r\n  templateUrl: './product-view.component.html',\r\n  styleUrls: ['./product-view.component.scss'],\r\n})\r\nexport class ProductViewComponent implements OnInit {\r\n  productId: string;\r\n  isProductInStore$: Observable<boolean>;\r\n  product$: Observable<Product>;\r\n  constructor(private route: ActivatedRoute, \r\n    private store: Store<AppState>,\r\n    @Optional() private formBuilder: FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.productId = this.route.snapshot.paramMap.get('id');\r\n\r\n    this.isProductInStore$ = this.store.pipe(\r\n      select(fromProductSelectors.entityExists, { id: this.productId })\r\n    );\r\n\r\n    this.product$ = this.isProductInStore$.pipe(\r\n      mergeMap((isProductInStore) => {\r\n        if (!isProductInStore) {\r\n          this.store.dispatch(\r\n            fromProductActions.loadProduct({ id: this.productId })\r\n          );\r\n        }\r\n\r\n        return this.store.pipe(\r\n          select(fromProductSelectors.selectEntityById, {\r\n            id: this.productId,\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// .row{\r\n//     display: flex;\r\n//     flex-wrap: wrap;\r\n//     align-content:stretch;\r\n    \r\n  \r\n//   }\r\n// .container{\r\n//     display: flex;\r\n//     // background-color:black;\r\n//     color: white;\r\n// }\r\n.headline{\r\n    color:orangered;\r\n    margin-left: 550px;\r\n}\r\n.allbtn{\r\n    display: flex;\r\nalign-items: flex-start;\r\nflex-wrap: wrap;\r\n\r\n    // margin-left: 670px;\r\n    // text-decoration: none;\r\n    // color: white;\r\n    // border: 2px solid white;\r\n    // padding:12px 14px;\r\n    // font-size: 14px;\r\n    // background: transparent;\r\n    // position: relative;\r\n    // cursor: pointer;\r\n}\r\n// .allbtn:hover{\r\n//     border: 1px solid orangered;\r\n//     background: orangered;\r\n//     transition: 1s;\r\n// }\r\n.row-card{\r\n//     display: flex;\r\n// flex-direction: row;\r\n    // margin-left:50px;\r\n}\r\n.card{\r\n    // flex-basis: 31%;\r\n    background:#fff3f3;\r\n    border-radius: 10px;\r\n    margin-bottom: 15%;\r\n    padding:20px 12px;\r\n    box-sizing: border-box;\r\n    color: orangered;\r\n    text-align: center;\r\n    height: 320px;\r\n    width: 400px; \r\n    margin-left: 450px;\r\n    display: flex;\r\n    flex-direction: row;\r\n    \r\n}\r\n// .card .card-body{\r\n//     // margin-left: 50px;\r\n\r\n// }\r\n// .card-list{\r\n//    display: flex;\r\n//    flex-direction: row;\r\n//  }\r\n.card-img-top{\r\n    width: 200px;\r\n    height: 150px;\r\n    margin-left: 30px;\r\n}\r\n.card-title{\r\n    font-size: 22px;\r\n    margin: 0;\r\n}\r\n.card-text{\r\n    // font-size: 16px;\r\n    text-align: center;\r\n}\r\nh1{\r\ncolor:rgb(34, 26, 23);\r\n}\r\n.btn{\r\n    // display: flex;\r\n    margin-left: 50px;\r\n\r\n    margin-bottom: 20px;\r\n}\r\n.btn2{\r\n    margin-left: 50px;\r\n    background-color: black;\r\n    // color:orange;\r\n    border: none;\r\n    color: white;\r\n    padding: 5px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    margin: 4px 2px;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n\r\n    // margin-top: 20px;\r\n}\r\n\r\n// // .addbtn{\r\n// //     background-color: orangered;\r\n// //     margin-left: 540px;\r\n// //     font-size: 18px;\r\n// //     height:50px;\r\n// //     border-radius: 2px solid white;\r\n// // }",
                    "styleUrl": "./product-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\r\n\t<div class=\"product-text\">\r\n\r\n\t\t<div class=\"headline\">\r\n\t\t\t<h2>Product Detail</h2>\r\n\t\t</div><br>\r\n\r\n\t\t<!-- <div class=\"row-card\"> -->\r\n\t\t\t<div class=\"row\">\r\n\r\n\t\t\t<div class=\"card\" *ngIf=\"product$ | async as product\">\r\n\r\n\t\t\t\t<div class=\"card-list\">\r\n\t\t\t\t\t<img class=\"card-img-top\" src=\"{{product.imageUrl}}\" alt=\"Card image cap\">\r\n\r\n\t\t\t\t\t<div class=\"card-body\">\r\n\r\n\t\t\t\t\t\t<p class=\"card-text\">Price: ${{product.price}}</p>\r\n\t\t\t\t\t\t<p class=\"card-text\">In Stock: {{product.quantity}}</p>\r\n\t\t\t\t\t\t<h5 class=\"card-title\">{{product.name}}</h5>\r\n\t\t\t\t\t\t<p class=\"card-text\">{{product.description}}</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"allbtn\">\r\n\t\t\t\t\t\t<div class=\"btn\" role=\"group\">\r\n\t\t\t\t\t<app-cart-button-widget [product]=\"product\" [text]=\"'Shopping Cart'\">\r\n\t\t\t\t\t\t</app-cart-button-widget>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<button class=\"btn2\" [routerLink]=\"['/shopping/products']\"\r\n\t\t\t\t\t\trouterLinkActive=\"router-link-active\"><i class=\"fas fa-arrow-left\"></i>\r\n\t\t\t\t\t\tBack To Shopping</button>\r\n\r\n\t\t\t\t\t\t</div>\t\t\r\n\t\t\t\t\t\t<!-- <button class=\"btn\" [routerLink]=\"['/shopping/products']\"\r\n\t\t\t\t\t\t\trouterLinkActive=\"router-link-active\"><i class=\"fas fa-arrow-left\"></i>\r\n\t\t\t\t\t\t\tBack To Shopping</button> -->\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t<!-- </div> -->\r\n\t\t</div>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-e0c359f7260591a56631f9a17477ee12",
            "file": "src/app/shared/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>register works!</p>\r\n"
        },
        {
            "name": "TopBarComponent",
            "id": "component-TopBarComponent-e7a9e539fbe94e46c080e8576aadb9b3",
            "file": "src/app/shared/top-bar/top-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-top-bar",
            "styleUrls": [
                "./top-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./top-bar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-top-bar',\r\n  templateUrl: './top-bar.component.html',\r\n  styleUrls: ['./top-bar.component.scss'],\r\n})\r\nexport class TopBarComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".top-bar {\r\n  height: 20px;\r\n}\r\n",
                    "styleUrl": "./top-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div class=\"top-bar\">\r\n\t<div class=\"container\">\r\n\t\t<div class=\"row\">\r\n\t\t\t<app-auth-links></app-auth-links>\r\n\t\t</div>\r\n\t</div>\r\n</div> -->"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-d98f050028505d7847d24f28290f8c23",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport { RouterModule } from '@angular/router';\r\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\r\n\r\n\r\nimport { ModalModule } from 'ngx-bootstrap/modal';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './shared/header/header.component';\r\nimport { FooterComponent } from './shared/footer/footer.component';\r\nimport { CoreComponent } from './core/core.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AlertModule } from 'ngx-alerts';\r\nimport { AuthModule } from './modules/auth/auth.module';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { TopBarComponent } from './shared/top-bar/top-bar.component';\r\nimport { CartModule } from './modules/cart/cart.module';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { environment } from '../environments/environment';\r\nimport { reducers, metaReducers } from './store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { CustomerSupportEffects } from './store/effects/customer-support.effects';\r\nimport { SpinnerEffects } from './store/effects/spinner.effects';\r\nimport { AlertEffects } from './store/effects/alert.effects';\r\nimport { RouteEffects } from './store/effects/route.effects';\r\nimport { ModalEffects } from './store/effects/modal.effects';\r\nimport { AppEffects } from './store/effects/app.effects';\r\nimport { StoreRouterConnectingModule } from '@ngrx/router-store';\r\nimport { CardComponent } from './card/card.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CoreComponent,\r\n    TopBarComponent,\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    CardComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    SharedModule,\r\n    HttpClientModule,\r\n    NgxSpinnerModule,\r\n    RouterModule,\r\n    AuthModule,\r\n    FormsModule,\r\n    CartModule,\r\n    AlertModule.forRoot({ maxMessages: 5, timeout: 5000, position: 'right' }),\r\n    BsDropdownModule.forRoot(),\r\n    ModalModule.forRoot(),\r\n    StoreDevtoolsModule.instrument({\r\n      maxAge: 25,\r\n      logOnly: environment.production,\r\n    }),\r\n    StoreModule.forRoot(reducers, {\r\n      metaReducers,\r\n      runtimeChecks: {\r\n        strictStateImmutability: true,\r\n        strictActionImmutability: true,\r\n        strictStateSerializability: true,\r\n        strictActionSerializability: true,\r\n        strictActionWithinNgZone: true,\r\n        strictActionTypeUniqueness: true,\r\n      },\r\n    }),\r\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n    EffectsModule.forRoot([\r\n      CustomerSupportEffects,\r\n      SpinnerEffects,\r\n      AlertEffects,\r\n      RouteEffects,\r\n      ModalEffects,\r\n      AppEffects,\r\n    ]),\r\n    StoreRouterConnectingModule.forRoot(),\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CoreComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "TopBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AuthModule"
                        },
                        {
                            "name": "CartModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e7911fe576889bef2079ea17a5603a8a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { NotFoundComponent } from './pages/not-found/not-found.component';\r\nimport { CoreComponent } from './core/core.component';\r\nimport { AdminGuard } from './modules/auth/resources/admin.guard';\r\nimport { AuthGuard } from './modules/auth/resources/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CoreComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        loadChildren: () =>\r\n          \"import('./pages/pages.module').then((m) => m.PagesModule)\",\r\n      },\r\n      {\r\n        path: 'auth',\r\n        loadChildren: () =>\r\n          \"import('./modules/auth/auth.module').then((m) => m.AuthModule)\",\r\n      },\r\n      {\r\n        path: 'shopping',\r\n        loadChildren: () =>\r\n          \"import('./modules/products/products.module').then(\\\n            (m) => m.ProductsModule\\\n          )\",\r\n      },\r\n      {\r\n        path: 'category',\r\n        loadChildren: () =>\r\n          \"import('./modules/category/category.module').then(\\\n            (m) => m.CategoryModule\\\n          )\",\r\n      },\r\n    ],\r\n  },\r\n  { path: '**', redirectTo: 'not-found' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-0f10598533b96ff6fd0c0f08f0d2f2f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AuthLinksComponent } from './auth-links/auth-links.component';\r\nimport { LoginModalComponent } from './login-modal/login-modal.component';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromAuth from '../../store/reducers/auth.reducer';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { AuthEffects } from '../../store/effects/auth.effects';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, AuthLinksComponent, LoginModalComponent],\r\n  imports: [CommonModule,\r\n    AuthRoutingModule,\r\n    FormsModule,\r\n    StoreModule.forFeature(fromAuth.authFeatureKey,\r\n    fromAuth.reducer),\r\n    EffectsModule.forFeature([AuthEffects])],\r\n  exports: [AuthLinksComponent],\r\n})\r\nexport class AuthModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthLinksComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "LoginModalComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AuthLinksComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-12643002b422b75ab4ec89a95aa161ae",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\nconst routes: Routes = [{ path: 'login', component: LoginComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartModule",
            "id": "module-CartModule-103cc36ee226131ef87b7a9620bd2399",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/cart/cart.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CartRoutingModule } from './cart-routing.module';\r\nimport { CartButtonWidgetComponent } from './cart-button-widget/cart-button-widget.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CartComponent } from './cart.component';\r\nimport { CartLinkWidgetComponent } from './cart-link-widget/cart-link-widget.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CartComponent,\r\n    CartButtonWidgetComponent,\r\n    CartLinkWidgetComponent,\r\n  ],\r\n  imports: [CommonModule, CartRoutingModule],\r\n  exports: [CartButtonWidgetComponent, CartLinkWidgetComponent],\r\n})\r\nexport class CartModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CartButtonWidgetComponent"
                        },
                        {
                            "name": "CartComponent"
                        },
                        {
                            "name": "CartLinkWidgetComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CartRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CartButtonWidgetComponent"
                        },
                        {
                            "name": "CartLinkWidgetComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CartRoutingModule",
            "id": "module-CartRoutingModule-f2bd498a595d74e5c30c47d4a6d3953f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/cart/cart-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CartComponent } from './cart.component';\r\nimport { AuthGuard } from '../auth/resources/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', canActivate: [AuthGuard], component: CartComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CartRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CategoryModule",
            "id": "module-CategoryModule-ff9be0f0f26ebae909e1c6ce56681c65",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/category/category.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CategoryRoutingModule } from './category-routing.module';\r\nimport { CategoryListComponent } from './category-list/category-list.component';\r\nimport { CategoryItemComponent } from './category-item/category-item.component';\r\nimport { CategoryEditComponent } from './category-edit/category-edit.component';\r\nimport { CategoryAddComponent } from './category-add/category-add.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CategoryListComponent,\r\n    CategoryItemComponent,\r\n    CategoryEditComponent,\r\n    CategoryAddComponent,\r\n  ],\r\n  imports: [CommonModule, CategoryRoutingModule, FormsModule],\r\n})\r\nexport class CategoryModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CategoryAddComponent"
                        },
                        {
                            "name": "CategoryEditComponent"
                        },
                        {
                            "name": "CategoryItemComponent"
                        },
                        {
                            "name": "CategoryListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CategoryRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CategoryRoutingModule",
            "id": "module-CategoryRoutingModule-98eb3a71e757c2ade7971939eff0bb7c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/category/category-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AdminGuard } from '../auth/resources/admin.guard';\r\nimport { CategoryItemComponent } from './category-item/category-item.component';\r\nimport { CategoryAddComponent } from './category-add/category-add.component';\r\nimport { CategoryListComponent } from './category-list/category-list.component';\r\nimport { CategoryEditComponent } from './category-edit/category-edit.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'list',\r\n    canActivate: [AdminGuard],\r\n    component: CategoryListComponent,\r\n  },\r\n  {\r\n    path: 'add',\r\n    canActivate: [AdminGuard],\r\n    component: CategoryAddComponent,\r\n  },\r\n  {\r\n    path: 'item/:id',\r\n    canActivate: [AdminGuard],\r\n    component: CategoryItemComponent,\r\n  },\r\n  {\r\n    path: 'edit/:id',\r\n    canActivate: [AdminGuard],\r\n    component: CategoryEditComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CategoryRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PagesModule",
            "id": "module-PagesModule-9bb30a8d6e127f94d2c7f8a238e83034",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/pages.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { PagesRoutingModule } from './pages-routing.module';\r\nimport { NotFoundComponent } from './not-found/not-found.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { CustomerSupportComponent } from './customer-support/customer-support.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  declarations: [NotFoundComponent, HomeComponent, CustomerSupportComponent],\r\n  imports: [\r\n    CommonModule,\r\n    PagesRoutingModule,\r\n    FormsModule,\r\n    SharedModule,\r\n    RouterModule,\r\n  ],\r\n})\r\nexport class PagesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CustomerSupportComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "NotFoundComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "PagesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PagesRoutingModule",
            "id": "module-PagesRoutingModule-8e5a6156144223d320a3894fbb0d0097",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/pages/pages-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { CustomerSupportComponent } from './customer-support/customer-support.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'home', component: HomeComponent },\r\n  { path: 'support', component: CustomerSupportComponent },\r\n  { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PagesRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsModule",
            "id": "module-ProductsModule-8694cfd9f003b89508c5b11dfa497a1b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/products/products.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ProductsRoutingModule } from './products-routing.module';\r\nimport { ProductsComponent } from './products.component';\r\nimport { PriceFilterWidgetComponent } from './price-filter-widget/price-filter-widget.component';\r\nimport { CartModule } from '../cart/cart.module';\r\nimport { ProductViewComponent } from './product-view/product-view.component';\r\nimport { ProductListComponent } from './product-list/product-list.component';\r\nimport { ProductItemComponent } from './product-item/product-item.component';\r\nimport { ProductEditComponent } from './product-edit/product-edit.component';\r\nimport { ProductAddComponent } from './product-add/product-add.component';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromProduct from './state/product.reducer';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { ProductEffects } from './state/product.effects';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProductsComponent,\r\n    PriceFilterWidgetComponent,\r\n    ProductViewComponent,\r\n    ProductListComponent,\r\n    ProductItemComponent,\r\n    ProductEditComponent,\r\n    ProductAddComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    ProductsRoutingModule,\r\n    FormsModule,\r\n    CartModule,\r\n    StoreModule.forFeature(fromProduct.productsFeatureKey, fromProduct.reducer),\r\n    EffectsModule.forFeature([ProductEffects]),\r\n  ],\r\n})\r\nexport class ProductsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PriceFilterWidgetComponent"
                        },
                        {
                            "name": "ProductAddComponent"
                        },
                        {
                            "name": "ProductEditComponent"
                        },
                        {
                            "name": "ProductItemComponent"
                        },
                        {
                            "name": "ProductListComponent"
                        },
                        {
                            "name": "ProductViewComponent"
                        },
                        {
                            "name": "ProductsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CartModule"
                        },
                        {
                            "name": "ProductsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductsRoutingModule",
            "id": "module-ProductsRoutingModule-1e55ad1e5063aa43ce1faa0c4652a9aa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/modules/products/products-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { ProductsComponent } from './products.component';\r\nimport { ProductViewComponent } from './product-view/product-view.component';\r\nimport { ProductListComponent } from './product-list/product-list.component';\r\nimport { ProductItemComponent } from './product-item/product-item.component';\r\nimport { ProductEditComponent } from './product-edit/product-edit.component';\r\nimport { ProductAddComponent } from './product-add/product-add.component';\r\nimport { AuthGuard } from '../auth/resources/auth.guard';\r\nimport { AdminGuard } from '../auth/resources/admin.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: 'products', component: ProductsComponent },\r\n  {\r\n    path: 'product-item/:id',\r\n    canActivate: [AdminGuard],\r\n    component: ProductItemComponent,\r\n  },\r\n  {\r\n    path: 'product-add',\r\n    canActivate: [AdminGuard],\r\n    component: ProductAddComponent,\r\n  },\r\n  {\r\n    path: 'product-edit/:id',\r\n    canActivate: [AdminGuard],\r\n    component: ProductEditComponent,\r\n  },\r\n  {\r\n    path: 'product-list',\r\n    canActivate: [AdminGuard],\r\n    component: ProductListComponent,\r\n  },\r\n  {\r\n    path: 'product-view/:id',\r\n    component: ProductViewComponent,\r\n  },\r\n  {\r\n    path: 'cart',\r\n    loadChildren: () => \"import('../cart/cart.module').then((m) => m.CartModule)\",\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ProductsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-7260402ce971bb5e405f27c5a34c3be4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport { AccordionModule } from 'ngx-bootstrap/accordion';\r\nimport { CourseListComponent } from './course-list/course-list.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { PaginationButtonsWidgetComponent } from './pagination-buttons-widget/pagination-buttons-widget.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\n@NgModule({\r\n  declarations: [CourseListComponent, PaginationButtonsWidgetComponent, RegisterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    NgxSpinnerModule,\r\n    AccordionModule.forRoot(),\r\n    RouterModule,\r\n  ],\r\n  exports: [CourseListComponent, PaginationButtonsWidgetComponent],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CourseListComponent"
                        },
                        {
                            "name": "PaginationButtonsWidgetComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CourseListComponent"
                        },
                        {
                            "name": "PaginationButtonsWidgetComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "actionData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    onButtonChange: action('onButtonChange'),\r\n    onArchiveTask: action('onArchiveTask')\r\n}"
            },
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Product>",
                "defaultValue": "createEntityAdapter<Product>({\r\n  sortComparer: sortByName,\r\n  // selectId: selectProductId\r\n})"
            },
            {
                "name": "addProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Add Component] Add Product',\r\n  props<{ product: Product }>()\r\n)",
                "rawdescription": "****************************************************************",
                "description": "<hr>\n"
            },
            {
                "name": "addProductFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Add Product Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "addProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Add Product Success',\r\n  props<{ product: Product }>()\r\n)"
            },
            {
                "name": "authFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'auth'"
            },
            {
                "name": "browserReload",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Core Component] Browser Reload',\r\n  props<{ user: User }>()\r\n)"
            },
            {
                "name": "clearForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/customer-support.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Customer Support Component] Clear Form'\r\n)"
            },
            {
                "name": "clearProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Product/API] Clear Products')"
            },
            {
                "name": "customerSupportFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/customer-support.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'customerSupport'"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "deleteItemProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Item Component] Delete Product',\r\n  props<{ productId: string }>()\r\n)",
                "rawdescription": "****************************************************************",
                "description": "<hr>\n"
            },
            {
                "name": "deleteProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product List Component] Delete Product',\r\n  props<{ productId: string }>()\r\n)"
            },
            {
                "name": "deleteProductFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Delete Product Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "deleteProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Delete Product Success'\r\n)"
            },
            {
                "name": "entityExists",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllEntities,\r\n  (entities, props): boolean => {\r\n    return entities[props.id] == undefined ? false : true;\r\n  }\r\n)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  baseUrl: 'http://localhost:3000/',\r\n}"
            },
            {
                "name": "HeaderContainer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/footer/footer.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: FooterComponent,\r\n  \r\n  template: `\r\n  <app-footer></app-footer>`,\r\n\r\n})"
            },
            {
                "name": "HeaderContainer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/header/header.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  template: `\r\n  <app-header></app-header>`,\r\n\r\n})"
            },
            {
                "name": "HeaderContainer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/auth/login/login.component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  component: LoginComponent,\r\n  template: `\r\n  <app-login></app-login>`,\r\n\r\n})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\r\n  user: {\r\n    id: null,\r\n    username: null,\r\n    email: null,\r\n    isadmin: null,\r\n  },\r\n  error: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/customer-support.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\r\n  name: null,\r\n  isSentSuccess: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "adapter.getInitialState({\r\n  // additional entity state properties\r\n  pagination: null,\r\n  error: null,\r\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadAdminProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Item Component] Load Product',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "loadAdminProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Products List Component] Load Products',\r\n  props<{ url: string }>()\r\n)"
            },
            {
                "name": "loadProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product View Component] Load Product',\r\n  props<{ id: string }>()\r\n)",
                "rawdescription": "****************************************************************",
                "description": "<hr>\n"
            },
            {
                "name": "loadProductFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Load Product Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "loadProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Products Component] Load Products',\r\n  props<{ url: string }>()\r\n)",
                "rawdescription": "****************************************************************",
                "description": "<hr>\n"
            },
            {
                "name": "loadProductsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Products Component] Load Products Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "loadProductsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Load Products Success',\r\n  props<{ paginatedResult: PaginatedResult<Product[]> }>()\r\n)"
            },
            {
                "name": "loadProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Load Product Success',\r\n  props<{ product: Product }>()\r\n)"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth Effect] Login User Failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "loginModal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Login Modal Component] Login User',\r\n  props<{ username: string; password: string }>()\r\n)"
            },
            {
                "name": "loginPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Login Component] Login User',\r\n  props<{ username: string; password: string }>()\r\n)"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth Effect] Login User Success',\r\n  props<{ user: User }>()\r\n)"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth Links Component] Logout User')"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production\r\n  ? [debug]\r\n  : []"
            },
            {
                "name": "paginationParamsModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/resources/product.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PaginationParams",
                "defaultValue": "{\r\n  pricemin: '0',\r\n  pricemax: '999',\r\n  page: '1',\r\n  limit: '9',\r\n  url: null,\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "productsFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'products'"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(AuthActions.loginSuccess, AuthActions.browserReload, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: action.user,\r\n      error: null,\r\n    };\r\n  }),\r\n  on(AuthActions.loginFailure, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: {\r\n        id: null,\r\n        username: null,\r\n        email: null,\r\n        isadmin: null,\r\n      },\r\n      error: action.error,\r\n    };\r\n  }),\r\n  on(AuthActions.logout, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: {\r\n        id: null,\r\n        username: null,\r\n        email: null,\r\n        isadmin: null,\r\n      },\r\n      error: null,\r\n    };\r\n  })\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/customer-support.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(fromSupportActions.sendingCustomerSupportMessage, (state, action) => {\r\n    return {\r\n      ...state,\r\n      name: action.data.name,\r\n    };\r\n  }),\r\n  on(fromSupportActions.sendMessageStatus, (state, action) => {\r\n    return {\r\n      ...state,\r\n      isSentSuccess: action.isSentSuccess,\r\n    };\r\n  }),\r\n  on(fromSupportActions.clearForm, (state) => {\r\n    return {\r\n      ...state,\r\n      name: null,\r\n      isSentSuccess: null,\r\n    };\r\n  })\r\n)"
            },
            {
                "name": "reducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  on(ProductActions.loadProductsSuccess, (state, action) =>\r\n    adapter.setAll(action.paginatedResult.result, {\r\n      ...state,\r\n      pagination: action.paginatedResult.pagination,\r\n    })\r\n  ),\r\n  on(\r\n    ProductActions.loadProductSuccess,\r\n    ProductActions.addProductSuccess,\r\n    (state, action) => adapter.addOne(action.product, state)\r\n  ),\r\n  on(ProductActions.upsertProductSuccess, (state, action) =>\r\n    adapter.upsertOne(action.product, state)\r\n  ),\r\n  on(\r\n    ProductActions.deleteProduct,\r\n    ProductActions.deleteItemProduct,\r\n    (state, action) => adapter.removeOne(action.productId, state)\r\n  ),\r\n  on(ProductActions.clearProducts, (state) => adapter.removeAll(state)),\r\n  on(\r\n    ProductActions.upsertProductFailure,\r\n    ProductActions.loadProductsFailure,\r\n    ProductActions.addProductFailure,\r\n    ProductActions.loadProductFailure,\r\n    ProductActions.deleteProductFailure,\r\n    (state, action) => {\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    }\r\n  )\r\n)"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<AppState>",
                "defaultValue": "{\r\n  [fromCustomerSupport.customerSupportFeatureKey]: fromCustomerSupport.reducer,\r\n\r\n  [fromAuth.authFeatureKey]: fromAuth.reducer,\r\n\r\n  router: fromRouter.routerReducer,\r\n\r\n  [fromProduct.productsFeatureKey]: fromProduct.reducer,\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAllEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProductsState,\r\n  ProductReducer.selectEntities\r\n)"
            },
            {
                "name": "selectAllProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProductsState,\r\n  ProductReducer.selectAll\r\n)"
            },
            {
                "name": "selectAuthLinksViewModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectIsAdmin,\r\n  selectIsLoggedIn,\r\n  (isAdmin: boolean, isLoggedIn: boolean): AuthLinksViewModal => {\r\n    return {\r\n      isAdmin: isAdmin,\r\n      isLoggedin: isLoggedIn,\r\n    };\r\n  }\r\n)"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<fromAuth.State>(\r\n  fromAuth.authFeatureKey\r\n)"
            },
            {
                "name": "selectCustomerSupportFeature",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/customer-support.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<State>(\r\n  customerSupportFeatureKey\r\n)"
            },
            {
                "name": "selectCustomerSupportModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/customer-support.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCustomerSupportFeature,\r\n  (state: State): CustomerSupportViewModel => {\r\n    return {\r\n      name: state.name,\r\n      isSentSuccess: state.isSentSuccess,\r\n    };\r\n  }\r\n)"
            },
            {
                "name": "selectEntityById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllEntities,\r\n  (entities, props) => entities[props.id]\r\n)"
            },
            {
                "name": "selectHeaderViewModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/header.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectIsAdmin,\r\n  selectIsLoggedIn,\r\n  (isAdmin: boolean, isLoggedIn: boolean): HeaderViewModel => {\r\n    return {\r\n      isAdmin: isAdmin,\r\n      isLoggedin: isLoggedIn,\r\n    };\r\n  }\r\n)"
            },
            {
                "name": "selectIsAdmin",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: fromAuth.State): boolean => state.user.isadmin\r\n)"
            },
            {
                "name": "selectIsLoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: fromAuth.State): boolean => state.user.id != null\r\n)"
            },
            {
                "name": "selectName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selectors/customer-support.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectCustomerSupportFeature,\r\n  (state: State) => state.name\r\n)"
            },
            {
                "name": "selectPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProductsState,\r\n  (state: ProductReducer.State) => state.pagination\r\n)"
            },
            {
                "name": "selectProductsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ProductReducer.State>(\r\n  ProductReducer.productsFeatureKey\r\n)"
            },
            {
                "name": "selectProductsViewModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectPagination,\r\n  selectAllProducts,\r\n  (\r\n    pagination: ProductModel.Pagination,\r\n    products: ProductModel.Product[]\r\n  ): ProductsViewModel => {\r\n    return {\r\n      pagination: pagination,\r\n      products: products,\r\n    };\r\n  }\r\n)"
            },
            {
                "name": "sendingCustomerSupportMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/customer-support.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Customer Support Component] Sending Customer Support Message',\r\n  props<{ data: CustomerMessage }>()\r\n)"
            },
            {
                "name": "sendMessageStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/customer-support.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Customer Support Effect] Send Customer Message Status',\r\n  props<{ isSentSuccess: boolean }>()\r\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<inputComponent>",
                "defaultValue": "orgs=>({\r\n    props:{\r\n        onButtonChange: actionData.onButtonChange,\r\n        onArchiveTask: actionData.onArchiveTask,\r\n    },\r\n    \r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "upsertProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Edit Component] Upsert Product',\r\n  props<{ product: Product }>()\r\n)",
                "rawdescription": "****************************************************************",
                "description": "<hr>\n"
            },
            {
                "name": "upsertProductFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Upsert Product failure',\r\n  props<{ error: any }>()\r\n)"
            },
            {
                "name": "upsertProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Product Effect] Upsert Product Success',\r\n  props<{ product: Product }>()\r\n)"
            },
            {
                "name": "UserModel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/auth/resources/auth.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "User",
                "defaultValue": "{\r\n  id: null,\r\n  username: null,\r\n  email: null,\r\n  isadmin: false,\r\n}"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/modules/products/state/product.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            }
        ],
        "functions": [
            {
                "name": "debug",
                "file": "src/app/store/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<any>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sortByName",
                "file": "src/app/modules/products/state/product.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/input.stories.ts": [
                {
                    "name": "actionData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    onButtonChange: action('onButtonChange'),\r\n    onArchiveTask: action('onArchiveTask')\r\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<inputComponent>",
                    "defaultValue": "orgs=>({\r\n    props:{\r\n        onButtonChange: actionData.onButtonChange,\r\n        onArchiveTask: actionData.onArchiveTask,\r\n    },\r\n    \r\n})"
                }
            ],
            "src/app/modules/products/state/product.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Product>",
                    "defaultValue": "createEntityAdapter<Product>({\r\n  sortComparer: sortByName,\r\n  // selectId: selectProductId\r\n})"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "adapter.getInitialState({\r\n  // additional entity state properties\r\n  pagination: null,\r\n  error: null,\r\n})"
                },
                {
                    "name": "productsFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'products'"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(ProductActions.loadProductsSuccess, (state, action) =>\r\n    adapter.setAll(action.paginatedResult.result, {\r\n      ...state,\r\n      pagination: action.paginatedResult.pagination,\r\n    })\r\n  ),\r\n  on(\r\n    ProductActions.loadProductSuccess,\r\n    ProductActions.addProductSuccess,\r\n    (state, action) => adapter.addOne(action.product, state)\r\n  ),\r\n  on(ProductActions.upsertProductSuccess, (state, action) =>\r\n    adapter.upsertOne(action.product, state)\r\n  ),\r\n  on(\r\n    ProductActions.deleteProduct,\r\n    ProductActions.deleteItemProduct,\r\n    (state, action) => adapter.removeOne(action.productId, state)\r\n  ),\r\n  on(ProductActions.clearProducts, (state) => adapter.removeAll(state)),\r\n  on(\r\n    ProductActions.upsertProductFailure,\r\n    ProductActions.loadProductsFailure,\r\n    ProductActions.addProductFailure,\r\n    ProductActions.loadProductFailure,\r\n    ProductActions.deleteProductFailure,\r\n    (state, action) => {\r\n      return {\r\n        ...state,\r\n        error: action.error,\r\n      };\r\n    }\r\n  )\r\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                }
            ],
            "src/app/modules/products/state/product.actions.ts": [
                {
                    "name": "addProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Add Component] Add Product',\r\n  props<{ product: Product }>()\r\n)",
                    "rawdescription": "****************************************************************",
                    "description": "<hr>\n"
                },
                {
                    "name": "addProductFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Add Product Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "addProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Add Product Success',\r\n  props<{ product: Product }>()\r\n)"
                },
                {
                    "name": "clearProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Product/API] Clear Products')"
                },
                {
                    "name": "deleteItemProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Item Component] Delete Product',\r\n  props<{ productId: string }>()\r\n)",
                    "rawdescription": "****************************************************************",
                    "description": "<hr>\n"
                },
                {
                    "name": "deleteProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product List Component] Delete Product',\r\n  props<{ productId: string }>()\r\n)"
                },
                {
                    "name": "deleteProductFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Delete Product Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "deleteProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Delete Product Success'\r\n)"
                },
                {
                    "name": "loadAdminProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Item Component] Load Product',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "loadAdminProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Products List Component] Load Products',\r\n  props<{ url: string }>()\r\n)"
                },
                {
                    "name": "loadProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product View Component] Load Product',\r\n  props<{ id: string }>()\r\n)",
                    "rawdescription": "****************************************************************",
                    "description": "<hr>\n"
                },
                {
                    "name": "loadProductFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Load Product Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "loadProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Products Component] Load Products',\r\n  props<{ url: string }>()\r\n)",
                    "rawdescription": "****************************************************************",
                    "description": "<hr>\n"
                },
                {
                    "name": "loadProductsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Products Component] Load Products Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "loadProductsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Load Products Success',\r\n  props<{ paginatedResult: PaginatedResult<Product[]> }>()\r\n)"
                },
                {
                    "name": "loadProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Load Product Success',\r\n  props<{ product: Product }>()\r\n)"
                },
                {
                    "name": "upsertProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Edit Component] Upsert Product',\r\n  props<{ product: Product }>()\r\n)",
                    "rawdescription": "****************************************************************",
                    "description": "<hr>\n"
                },
                {
                    "name": "upsertProductFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Upsert Product failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "upsertProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Product Effect] Upsert Product Success',\r\n  props<{ product: Product }>()\r\n)"
                }
            ],
            "src/app/store/reducers/auth.reducer.ts": [
                {
                    "name": "authFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'auth'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\r\n  user: {\r\n    id: null,\r\n    username: null,\r\n    email: null,\r\n    isadmin: null,\r\n  },\r\n  error: null,\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  on(AuthActions.loginSuccess, AuthActions.browserReload, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: action.user,\r\n      error: null,\r\n    };\r\n  }),\r\n  on(AuthActions.loginFailure, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: {\r\n        id: null,\r\n        username: null,\r\n        email: null,\r\n        isadmin: null,\r\n      },\r\n      error: action.error,\r\n    };\r\n  }),\r\n  on(AuthActions.logout, (state, action) => {\r\n    return {\r\n      ...state,\r\n      user: {\r\n        id: null,\r\n        username: null,\r\n        email: null,\r\n        isadmin: null,\r\n      },\r\n      error: null,\r\n    };\r\n  })\r\n)"
                }
            ],
            "src/app/store/actions/auth.actions.ts": [
                {
                    "name": "browserReload",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Core Component] Browser Reload',\r\n  props<{ user: User }>()\r\n)"
                },
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth Effect] Login User Failure',\r\n  props<{ error: any }>()\r\n)"
                },
                {
                    "name": "loginModal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Login Modal Component] Login User',\r\n  props<{ username: string; password: string }>()\r\n)"
                },
                {
                    "name": "loginPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Login Component] Login User',\r\n  props<{ username: string; password: string }>()\r\n)"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth Effect] Login User Success',\r\n  props<{ user: User }>()\r\n)"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth Links Component] Logout User')"
                }
            ],
            "src/app/store/actions/customer-support.actions.ts": [
                {
                    "name": "clearForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/customer-support.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Customer Support Component] Clear Form'\r\n)"
                },
                {
                    "name": "sendingCustomerSupportMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/customer-support.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Customer Support Component] Sending Customer Support Message',\r\n  props<{ data: CustomerMessage }>()\r\n)"
                },
                {
                    "name": "sendMessageStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/customer-support.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Customer Support Effect] Send Customer Message Status',\r\n  props<{ isSentSuccess: boolean }>()\r\n)"
                }
            ],
            "src/app/store/reducers/customer-support.reducer.ts": [
                {
                    "name": "customerSupportFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/customer-support.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'customerSupport'"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/customer-support.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\r\n  name: null,\r\n  isSentSuccess: null,\r\n}"
                },
                {
                    "name": "reducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/customer-support.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  on(fromSupportActions.sendingCustomerSupportMessage, (state, action) => {\r\n    return {\r\n      ...state,\r\n      name: action.data.name,\r\n    };\r\n  }),\r\n  on(fromSupportActions.sendMessageStatus, (state, action) => {\r\n    return {\r\n      ...state,\r\n      isSentSuccess: action.isSentSuccess,\r\n    };\r\n  }),\r\n  on(fromSupportActions.clearForm, (state) => {\r\n    return {\r\n      ...state,\r\n      name: null,\r\n      isSentSuccess: null,\r\n    };\r\n  })\r\n)"
                }
            ],
            "src/app/modules/products/state/product.selectors.ts": [
                {
                    "name": "entityExists",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllEntities,\r\n  (entities, props): boolean => {\r\n    return entities[props.id] == undefined ? false : true;\r\n  }\r\n)"
                },
                {
                    "name": "selectAllEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProductsState,\r\n  ProductReducer.selectEntities\r\n)"
                },
                {
                    "name": "selectAllProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProductsState,\r\n  ProductReducer.selectAll\r\n)"
                },
                {
                    "name": "selectEntityById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllEntities,\r\n  (entities, props) => entities[props.id]\r\n)"
                },
                {
                    "name": "selectPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProductsState,\r\n  (state: ProductReducer.State) => state.pagination\r\n)"
                },
                {
                    "name": "selectProductsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProductReducer.State>(\r\n  ProductReducer.productsFeatureKey\r\n)"
                },
                {
                    "name": "selectProductsViewModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/state/product.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectPagination,\r\n  selectAllProducts,\r\n  (\r\n    pagination: ProductModel.Pagination,\r\n    products: ProductModel.Product[]\r\n  ): ProductsViewModel => {\r\n    return {\r\n      pagination: pagination,\r\n      products: products,\r\n    };\r\n  }\r\n)"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  baseUrl: 'http://localhost:3000/',\r\n}"
                }
            ],
            "src/app/shared/footer/footer.component.stories.ts": [
                {
                    "name": "HeaderContainer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/footer/footer.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: FooterComponent,\r\n  \r\n  template: `\r\n  <app-footer></app-footer>`,\r\n\r\n})"
                }
            ],
            "src/app/shared/header/header.component.stories.ts": [
                {
                    "name": "HeaderContainer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/header/header.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: HeaderComponent,\r\n  template: `\r\n  <app-header></app-header>`,\r\n\r\n})"
                }
            ],
            "src/app/modules/auth/login/login.component.stories.ts": [
                {
                    "name": "HeaderContainer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/auth/login/login.component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  component: LoginComponent,\r\n  template: `\r\n  <app-login></app-login>`,\r\n\r\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/index.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production\r\n  ? [debug]\r\n  : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<AppState>",
                    "defaultValue": "{\r\n  [fromCustomerSupport.customerSupportFeatureKey]: fromCustomerSupport.reducer,\r\n\r\n  [fromAuth.authFeatureKey]: fromAuth.reducer,\r\n\r\n  router: fromRouter.routerReducer,\r\n\r\n  [fromProduct.productsFeatureKey]: fromProduct.reducer,\r\n}"
                }
            ],
            "src/app/modules/products/resources/product.ts": [
                {
                    "name": "paginationParamsModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/products/resources/product.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PaginationParams",
                    "defaultValue": "{\r\n  pricemin: '0',\r\n  pricemax: '999',\r\n  page: '1',\r\n  limit: '9',\r\n  url: null,\r\n}"
                }
            ],
            "src/app/store/selectors/auth.selectors.ts": [
                {
                    "name": "selectAuthLinksViewModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectIsAdmin,\r\n  selectIsLoggedIn,\r\n  (isAdmin: boolean, isLoggedIn: boolean): AuthLinksViewModal => {\r\n    return {\r\n      isAdmin: isAdmin,\r\n      isLoggedin: isLoggedIn,\r\n    };\r\n  }\r\n)"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<fromAuth.State>(\r\n  fromAuth.authFeatureKey\r\n)"
                },
                {
                    "name": "selectIsAdmin",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: fromAuth.State): boolean => state.user.isadmin\r\n)"
                },
                {
                    "name": "selectIsLoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: fromAuth.State): boolean => state.user.id != null\r\n)"
                }
            ],
            "src/app/store/selectors/customer-support.selectors.ts": [
                {
                    "name": "selectCustomerSupportFeature",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/customer-support.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<State>(\r\n  customerSupportFeatureKey\r\n)"
                },
                {
                    "name": "selectCustomerSupportModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/customer-support.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCustomerSupportFeature,\r\n  (state: State): CustomerSupportViewModel => {\r\n    return {\r\n      name: state.name,\r\n      isSentSuccess: state.isSentSuccess,\r\n    };\r\n  }\r\n)"
                },
                {
                    "name": "selectName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/customer-support.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectCustomerSupportFeature,\r\n  (state: State) => state.name\r\n)"
                }
            ],
            "src/app/store/selectors/header.selectors.ts": [
                {
                    "name": "selectHeaderViewModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selectors/header.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectIsAdmin,\r\n  selectIsLoggedIn,\r\n  (isAdmin: boolean, isLoggedIn: boolean): HeaderViewModel => {\r\n    return {\r\n      isAdmin: isAdmin,\r\n      isLoggedin: isLoggedIn,\r\n    };\r\n  }\r\n)"
                }
            ],
            "src/app/modules/auth/resources/auth.ts": [
                {
                    "name": "UserModel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/modules/auth/resources/auth.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "defaultValue": "{\r\n  id: null,\r\n  username: null,\r\n  email: null,\r\n  isadmin: false,\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/index.ts": [
                {
                    "name": "debug",
                    "file": "src/app/store/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<any>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/modules/products/state/product.reducer.ts": [
                {
                    "name": "sortByName",
                    "file": "src/app/modules/products/state/product.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "CoreComponent",
                        "children": [
                            {
                                "path": "",
                                "loadChildren": "./pages/pages.module#PagesModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/pages/pages-routing.module.ts",
                                                "module": "PagesRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "home",
                                                        "component": "HomeComponent"
                                                    },
                                                    {
                                                        "path": "support",
                                                        "component": "CustomerSupportComponent"
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "home",
                                                        "pathMatch": "full"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "PagesModule"
                                    }
                                ]
                            },
                            {
                                "path": "auth",
                                "loadChildren": "./modules/auth/auth.module#AuthModule"
                            },
                            {
                                "path": "shopping",
                                "loadChildren": "./modules/products/products.module#ProductsModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/modules/products/products-routing.module.ts",
                                                "module": "ProductsRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "products",
                                                        "component": "ProductsComponent"
                                                    },
                                                    {
                                                        "path": "product-item/:id",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "ProductItemComponent"
                                                    },
                                                    {
                                                        "path": "product-add",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "ProductAddComponent"
                                                    },
                                                    {
                                                        "path": "product-edit/:id",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "ProductEditComponent"
                                                    },
                                                    {
                                                        "path": "product-list",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "ProductListComponent"
                                                    },
                                                    {
                                                        "path": "product-view/:id",
                                                        "component": "ProductViewComponent"
                                                    },
                                                    {
                                                        "path": "cart",
                                                        "loadChildren": "../cart/cart.module#CartModule"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "ProductsModule"
                                    }
                                ]
                            },
                            {
                                "path": "category",
                                "loadChildren": "./modules/category/category.module#CategoryModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/modules/category/category-routing.module.ts",
                                                "module": "CategoryRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "list",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "CategoryListComponent"
                                                    },
                                                    {
                                                        "path": "add",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "CategoryAddComponent"
                                                    },
                                                    {
                                                        "path": "item/:id",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "CategoryItemComponent"
                                                    },
                                                    {
                                                        "path": "edit/:id",
                                                        "canActivate": [
                                                            "AdminGuard"
                                                        ],
                                                        "component": "CategoryEditComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "CategoryModule"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "not-found"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/modules/auth/auth-routing.module.ts",
                "module": "AuthRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/auth-links/auth-links.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthLinksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/login-modal/login-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/login/login.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderContainer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/resources/admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/resources/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/resources/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/resources/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/resources/auth.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UserModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/auth/resources/modal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cart/cart-button-widget/cart-button-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartButtonWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cart/cart-link-widget/cart-link-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartLinkWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cart/resources/cart.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Cart",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cart/resources/cart.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cart/resources/helper-shopping.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelperCartService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/cart/resources/mock-api-cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockApiCartService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/category/category-add/category-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/category/category-edit/category-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/category/category-item/category-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/category/category-list/category-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CategoryListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/category/resources/category-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CategoryApiService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/category/resources/model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Category",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/price-filter-widget/price-filter-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PriceFilterWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/product-add/product-add.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductAddComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/product-edit/product-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/product-item/product-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/product-view/product-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/products.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/helper-shopping.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelperShoppingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/mock-product-api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockProductApiService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginatedResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginationParams",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PriceFilter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/product.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/resources/product.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "paginationParamsModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProduct",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteItemProduct",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProductFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAdminProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadAdminProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProduct",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProducts",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertProduct",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertProductFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "upsertProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sortByName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productsFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductsViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "entityExists",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectEntityById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/modules/products/state/product.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductsViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/customer-support/customer-support.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CustomerSupportComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/course-list/course-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CourseListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/footer/footer.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderContainer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderContainer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/customer-message.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomerMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/pagination.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginatedResult",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/pagination.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Pagination",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pagination-buttons-widget/pagination-buttons-widget.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginationButtonsWidgetComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/customer-support.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomerSupportService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/pagination.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaginationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/paginationpage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PaginationpageService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/top-bar/top-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TopBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserReload",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginModal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/customer-support.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/customer-support.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sendingCustomerSupportMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/customer-support.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "sendMessageStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/alert.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AlertEffects",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/app.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/customer-support.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CustomerSupportEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/modal.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ModalEffects",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/route.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RouteEffects",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/spinner.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SpinnerEffects",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "debug",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/customer-support.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/customer-support.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customerSupportFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/customer-support.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/customer-support.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/auth.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthLinksViewModal",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthLinksViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsAdmin",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsLoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/customer-support.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CustomerSupportViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/customer-support.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCustomerSupportFeature",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/customer-support.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCustomerSupportModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/customer-support.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/header.selectors.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HeaderViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selectors/header.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHeaderViewModel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "inputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "actionData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}